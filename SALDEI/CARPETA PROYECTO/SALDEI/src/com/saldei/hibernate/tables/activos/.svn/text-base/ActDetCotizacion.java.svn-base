package com.saldei.hibernate.tables.activos;

import java.text.NumberFormat;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;

import com.saldei.hibernate.tables.inventario.InvBodega;
import com.saldei.hibernate.tables.inventario.InvDetMovimiento;
import com.saldei.hibernate.tables.inventario.InvDetMovimientoDAO;
import com.saldei.hibernate.tables.inventario.InvDetMovimientoId;
import com.saldei.hibernate.tables.inventario.InvExistencia;
import com.saldei.hibernate.tables.inventario.InvExistenciaDAO;
import com.saldei.hibernate.tables.inventario.InvExistenciaId;
import com.saldei.hibernate.tables.inventario.InvMovimiento;
import com.saldei.hibernate.tables.inventario.InvMovimientoDAO;
import com.saldei.hibernate.tables.inventario.InvRecurso;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;

// Generated by MyEclipse Persistence Tools

/**
 * ActDetCotizacion generated by MyEclipse Persistence Tools
 */
public class ActDetCotizacion extends AbstractActDetCotizacion implements
		java.io.Serializable {

	private double montoTotal;

	// Constructors

	/** default constructor */
	public ActDetCotizacion() {
	}

	/** minimal constructor */
	public ActDetCotizacion(ActDetCotizacionId id) {
		super(id);
	}

	
	
	/**
	 * @param id
	 * @param precioUnitario
	 * @param cantidad
	 * @param precioUnitarioIva
	 */
	public ActDetCotizacion(ActDetCotizacionId id, double precioUnitario,
			Integer cantidad, double precioUnitarioIva) {
		super(id, precioUnitario, cantidad, precioUnitarioIva);
		// TODO Auto-generated constructor stub
	}

	/**
	 * @return the montoTotal
	 */
	public double getMontoTotal() {
		return this.getCantidad() * this.getPrecioUnitarioIva();
	}

	/**
	 * @param montoTotal
	 *            the montoTotal to set
	 */
	public void setMontoTotal(double montoTotal) {
		this.montoTotal = montoTotal;
	}

	public Integer getCantidadIngresada() {

		List data;
		InvMovimiento invMovimiento;
		InvMovimientoDAO invMovimientoDAO = new InvMovimientoDAO();
		InvDetMovimientoDAO invDetMovimientoDAO = new InvDetMovimientoDAO();
		InvDetMovimiento invDetMovimiento = null;
		InvRecurso invRecurso = new InvRecurso();
		invRecurso.setCodRecurso(this.getId().getInvRecurso().getCodRecurso());
		Iterator it;
		int cantidadAcumulada = 0;
		data = invMovimientoDAO.findAllBySolicitudIn(this.getId()
				.getActCotizacion().getId().getActSolicitud().getId()
				.getTipoSolicitud(), this.getId().getActCotizacion().getId()
				.getActSolicitud().getId().getCodSolicitud());
		if (data != null && !data.isEmpty()) {
			it = data.iterator();
			for (int i = 0; it.hasNext(); i++) {
				invMovimiento = (InvMovimiento) it.next();
				invDetMovimiento = invDetMovimientoDAO
						.findById(new InvDetMovimientoId(invMovimiento,
								invRecurso));
				if (invDetMovimiento != null)
					cantidadAcumulada = cantidadAcumulada
							+ invDetMovimiento.getCantidad();
			}

		}

		HibernateSessionFactory.getSession().close();
		return cantidadAcumulada;
	}

	public Double getExistencias() {
		InvExistencia invExistencia;
		ActSolicitud actSolicitud;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		InvRecurso invRecurso = new InvRecurso();
		InvBodega invBodega = new InvBodega();
		InvExistenciaDAO invExistenciaDAO = new InvExistenciaDAO();

		actSolicitud = actSolicitudDAO.findById(this.getId().getActCotizacion()
				.getId().getActSolicitud().getId());
		invRecurso.setCodRecurso(this.getId().getInvRecurso().getCodRecurso());
		invBodega.setCodBodega(actSolicitud.getCodBodega());
		InvExistenciaId invExistenciaId = new InvExistenciaId(invBodega,
				invRecurso);
		invExistencia = invExistenciaDAO.findById(invExistenciaId);
		HibernateSessionFactory.getSession().close();
		if (invExistencia != null)
			return invExistencia.getExistencia();
		return 0.0;
	}

	public Integer getCantidadEntregada() {

		List data;
		InvMovimiento invMovimiento;
		InvMovimientoDAO invMovimientoDAO = new InvMovimientoDAO();
		InvDetMovimientoDAO invDetMovimientoDAO = new InvDetMovimientoDAO();
		InvDetMovimiento invDetMovimiento = null;
		InvRecurso invRecurso = new InvRecurso();
		invRecurso.setCodRecurso(this.getId().getInvRecurso().getCodRecurso());
		Iterator it;
		int cantidadAcumulada = 0;
		data = invMovimientoDAO.findAllBySolicitudOut(this.getId()
				.getActCotizacion().getId().getActSolicitud().getId()
				.getTipoSolicitud(), this.getId().getActCotizacion().getId()
				.getActSolicitud().getId().getCodSolicitud());
		if (data != null && !data.isEmpty()) {
			it = data.iterator();
			for (int i = 0; it.hasNext(); i++) {
				invMovimiento = (InvMovimiento) it.next();
				invDetMovimiento = invDetMovimientoDAO
						.findById(new InvDetMovimientoId(invMovimiento,
								invRecurso));
				if (invDetMovimiento != null)
					cantidadAcumulada = cantidadAcumulada
							+ invDetMovimiento.getCantidad();
			}

		}

		HibernateSessionFactory.getSession().close();
		return cantidadAcumulada;
	}

	public String getSeriesIngresadas() {
		String series = "";
		List data;
		Iterator it;
		int flag = 0;
		ActActivoDAO actActivoDAO = new ActActivoDAO();
		try {
			data = actActivoDAO.findBySolicitudIn(this.getId()
					.getActCotizacion().getId().getActSolicitud().getId()
					.getTipoSolicitud(), this.getId().getActCotizacion()
					.getId().getActSolicitud().getId().getCodSolicitud(), this
					.getId().getInvRecurso().getCodRecurso());

			if (!data.isEmpty()) {
				it = data.iterator();
				for (int i = 0; it.hasNext(); i++) {
					ActActivo actActivo = (ActActivo) it.next();
					if (flag == 2) {
						series = series + "<br>" + actActivo.getNumSerie();
						flag = 0;
					} else {
						series = series + "," + actActivo.getNumSerie();
						flag = flag + 1;
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		series = series.replaceFirst(",", "");
		return series;
	}

	public String getSeriesEntregadas() {
		String series = "";
		List data;
		Iterator it;
		int flag = 0;
		ActActivoDAO actActivoDAO = new ActActivoDAO();
		try {
			data = actActivoDAO.findBySolicitudOut(this.getId()
					.getActCotizacion().getId().getActSolicitud().getId()
					.getTipoSolicitud(), this.getId().getActCotizacion()
					.getId().getActSolicitud().getId().getCodSolicitud(), this
					.getId().getInvRecurso().getCodRecurso());

			if (!data.isEmpty()) {
				it = data.iterator();
				for (int i = 0; it.hasNext(); i++) {
					ActActivo actActivo = (ActActivo) it.next();
					if (flag == 2) {
						series = series + "<br>" + actActivo.getNumSerie();
						flag = 0;
					} else {
						series = series + "," + actActivo.getNumSerie();
						flag = flag + 1;
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		series = series.replaceFirst(",", "");
		return series;
	}

	public String getPumoney() {
		String mon = "";
		try {
			mon = NumberFormat.getCurrencyInstance(Locale.US).format(
					this.getPrecioUnitario()).toString();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mon;
	}

	public String getMomoney() {
		String mon = "";
		try {
			mon = NumberFormat.getCurrencyInstance(Locale.US).format(
					this.getPrecioUnitarioIva() * this.getCantidad()).toString();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mon;
	}

}
