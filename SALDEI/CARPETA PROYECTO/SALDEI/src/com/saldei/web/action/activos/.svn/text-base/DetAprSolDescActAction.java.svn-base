/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.activos;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;

import com.saldei.hibernate.tables.Usuario;
import com.saldei.hibernate.tables.activos.ActDetSolicitudDAO;
import com.saldei.hibernate.tables.activos.ActSolicitud;
import com.saldei.hibernate.tables.activos.ActSolicitudDAO;
import com.saldei.hibernate.tables.activos.ActUnidad;
import com.saldei.hibernate.tables.activos.ActUnidadDAO;
import com.saldei.hibernate.tables.inventario.InvBodega;
import com.saldei.hibernate.tables.inventario.InvBodegaDAO;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.util.mail.Email;
import com.saldei.web.action.BaseAction;
import com.saldei.web.bean.Util;
import com.saldei.web.bean.seguridad.UsuarioDto;
import com.saldei.web.form.activos.DetAprSolDescActForm;
import com.saldei.web.services.administracion.ParametroServices;
import com.saldei.web.services.seguridad.UsuarioServices;

/**
 * MyEclipse Struts Creation date: 06-29-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/detAprSolDescActAction" name="detAprSolDescActForm"
 *                input="/html/activos/detAprSolDescAct.jsp" parameter="accion"
 *                scope="request"
 * @struts.action-forward name="updateFail"
 *                        path="/html/activos/detAprSolDescAct.jsp"
 * @struts.action-forward name="back"
 *                        path="/detAprSolDescActAction.do?accion=Find"
 * @struts.action-forward name="success"
 *                        path="/detAprSolDescActAction.jsp?accion="
 */
public class DetAprSolDescActAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	protected Map getKeyMethodMap() {
		HashMap map = (HashMap) super.getKeyMethodMap();
		map.put("opc.aprobar", "aprobar");
		map.put("opc.rechazar", "rechazar");
		map.put("opc.anular", "anular");
		return map;
	}

	@Override
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		return null;
	}

	public ActionForward aprobar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		DetAprSolDescActForm detAprSolDescActForm = (DetAprSolDescActForm) form;
		ActSolicitud actSolicitud;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActionErrors errors = new ActionErrors();
		UsuarioDto usuarioDto;
		ParametroServices parametroServices = new ParametroServices();
		Email email = new Email();
		String msgText;
		List act;
		UsuarioServices usuarioServices = new UsuarioServices();
		Usuario user = (Usuario) request.getSession().getAttribute("usuario");
		ActUnidad actUnidad = new ActUnidad();
		ActUnidadDAO actUnidadDAO = new ActUnidadDAO();
		ActDetSolicitudDAO actDetSolicitudDAO = new ActDetSolicitudDAO();
		Util emailer = new Util();
		try {

			detAprSolDescActForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				act = actDetSolicitudDAO.verificarApr(detAprSolDescActForm
						.getActSolicitud().getId().getCodSolicitud(), "D");
				if (act.isEmpty()) {
					detAprSolDescActForm.validate(mapping, request, errors);
					actSolicitud = actSolicitudDAO
							.findById(detAprSolDescActForm.getActSolicitud()
									.getId());
					actSolicitud.setEstado("A");
					actSolicitud.setCodBodega(Integer
							.valueOf(detAprSolDescActForm.getCodBodega()));
					actSolicitud.setMotivoRechazo(detAprSolDescActForm
							.getComentarioResolucion());
					// actSolicitud.setEstado("A");
					detAprSolDescActForm.setEstadoNombre("Aprobada");
					detAprSolDescActForm.setEstado("A");

					// Primero se contesta al solicitante
					msgText = emailer.aprobacionTrasladoSolicitudMail(
							"solicitud de traslado a bodega", actSolicitud
									.getId().getCodSolicitud().toString(),
							actSolicitud.getFecha_creacion(),
							"solicitud de traslado a bodega", actSolicitud
									.getComentario(), detAprSolDescActForm
									.getComentarioResolucion(), "S", "");
					usuarioDto = usuarioServices
							.getUsuarioDto(detAprSolDescActForm
									.getCodSolicitante().toString());
					email
							.sendEmail(
									"UCA-SALDEI: Resolucion de Solicitud de Traslado a Bodega",
									"saldei@uca.edu.sv",
									new String[] { usuarioDto.getEmail() },
									null, msgText, null);

					// Luego se le informa al bodeguero
					msgText = emailer.aprobacionTrasladoSolicitudMail(
							"solicitud de traslado a bodega", actSolicitud
									.getId().getCodSolicitud().toString(),
							actSolicitud.getFecha_creacion(),
							"recibir traslado", actSolicitud.getComentario(),
							detAprSolDescActForm.getComentarioResolucion(),
							"N", "activos");
					actUnidad = actUnidadDAO.findById(Integer
							.valueOf(detAprSolDescActForm.getCodBodega()));
					usuarioDto = usuarioServices.getUsuarioDto(actUnidad
							.getCodResponsable());
					email
							.sendEmail(
									"UCA-SALDEI: Resolucion de Solicitud de Traslado a Bodega",
									"saldei@uca.edu.sv",
									new String[] { usuarioDto.getEmail() },
									null, msgText, null);
					// actDetSolicitudDAO.trasladarBodega(detAprSolDescActForm.getCodBodega(),
					// detAprSolDescActForm.getCodSolicitud())
					actSolicitudDAO.merge(actSolicitud);
					HibernateSessionFactory.getSession().beginTransaction()
							.commit();
					errors.add("detAprDesc.mensaje.exito", new ActionError(
							"detAprDesc.mensaje.exito.aprobada"));
					this.addErrors(request, errors);
				} else {
					errors
							.add(
									"detAprDesc.mensajeError.error",
									new ActionError(
											"detAprDesc.mensajeError.error.notraslado"));
					this.addErrors(request, errors);
					request.setAttribute("AR", "NO");
				}
			} else {
				this.addErrors(request, errors);
				setFLAG_UPDATE(true);
			}

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		this.find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward rechazar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data, data2;
		// ConfigEmail mail = new ConfigEmail();
		DetAprSolDescActForm detAprSolDescActForm = (DetAprSolDescActForm) form;
		// DetalleSolPrestamoForm prestamo = new DetalleSolPrestamoForm();
		ActSolicitud actSolicitud;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActionErrors errors = new ActionErrors();
		UsuarioDto usuarioDto;
		ParametroServices parametroServices = new ParametroServices();
		Email email = new Email();
		String msgText;
		UsuarioServices usuarioServices = new UsuarioServices();
		Usuario user = (Usuario) request.getSession().getAttribute("usuario");
		ActUnidad actUnidad = new ActUnidad();
		ActUnidadDAO actUnidadDAO = new ActUnidadDAO();
		ActDetSolicitudDAO actDetSolicitudDAO = new ActDetSolicitudDAO();
		Util emailer = new Util();
		try {
			actSolicitud = actSolicitudDAO.findById(detAprSolDescActForm
					.getActSolicitud().getId());
			actSolicitud.setEstado("R");
			actSolicitud.setMotivoRechazo(detAprSolDescActForm
					.getComentarioResolucion());
			detAprSolDescActForm.setEstadoNombre("Rechazada");
			detAprSolDescActForm.setEstado("R");

			// Primero se contesta al solicitante
			msgText = emailer.rechazoSolicitudMail(
					"solicitud de traslado a bodega", actSolicitud.getId()
							.getCodSolicitud().toString(), actSolicitud
							.getFecha_creacion(), actSolicitud.getComentario(),
					detAprSolDescActForm.getComentarioResolucion());
			usuarioDto = usuarioServices.getUsuarioDto(detAprSolDescActForm
					.getCodSolicitante().toString());
			email
					.sendEmail(
							"UCA-SALDEI: Resolucion de Solicitud de Traslado a Bodega",
							"saldei@uca.edu.sv", new String[] { usuarioDto
									.getEmail() }, null, msgText, null);
			actSolicitudDAO.merge(actSolicitud);
			HibernateSessionFactory.getSession().beginTransaction().commit();
			errors.add("detAprDesc.mensaje.exito", new ActionError(
					"detAprDesc.mensaje.exito.rechazada"));
			this.addErrors(request, errors);
		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		this.find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward find(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data, data2;

		DetAprSolDescActForm detAprSolDescActForm = (DetAprSolDescActForm) form;
		ActDetSolicitudDAO actDetSolicitudDAO = new ActDetSolicitudDAO();
		ActSolicitud actSolicitud = new ActSolicitud();
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();

		try {
			if (!detAprSolDescActForm.getEstado().equals("E")) {
				actSolicitud = actSolicitudDAO
						.findById(detAprSolDescActForm.getActDetSolicitud()
								.getId().getActSolicitud().getId());
				if (detAprSolDescActForm.getEstado().equals("R")) {
					if (actSolicitud.getMotivoRechazo() == null)
						detAprSolDescActForm.setComentarioResolucion("");
					else
						detAprSolDescActForm
								.setComentarioResolucion(actSolicitud
										.getMotivoRechazo());
				} else {
					InvBodega invBodega = new InvBodega();
					InvBodegaDAO invBodegaDAO = new InvBodegaDAO();
					invBodega = invBodegaDAO.findById(actSolicitud
							.getCodBodega());
					detAprSolDescActForm.setCodBodega(String
							.valueOf(actSolicitud.getCodBodega()));
					detAprSolDescActForm.setBodegaDes(invBodega.getNombre());
				}
			}

			data = actDetSolicitudDAO.findAllDetDescAct(detAprSolDescActForm
					.getCodSolicitud());
			request.setAttribute("listDetDesc", data);

			if (!isFLAG_UPDATE()) {
				detAprSolDescActForm.reset(mapping, request);
			} else {
				setFLAG_UPDATE(false);
			}
			// detallePptoForm.setCodPresupuesto(codppto);

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		return mapping.findForward(target);
	}

	public ActionForward anular(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		String msgText;
		List data, data2;
		// ConfigEmail mail = new ConfigEmail();
		DetAprSolDescActForm detAprSolDescActForm = (DetAprSolDescActForm) form;
		ActSolicitud actSolicitud;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActionErrors errors = new ActionErrors();
		UsuarioServices usuarioServices = new UsuarioServices();
		UsuarioDto usuarioDto;
		Email email = new Email();
		Util emailer = new Util();
		ActUnidad actUnidad = new ActUnidad();
		ActUnidadDAO actUnidadDAO = new ActUnidadDAO();
		try {

			actSolicitud = actSolicitudDAO.findById(detAprSolDescActForm
					.getActSolicitud().getId());
			actSolicitud.setEstado("B");
			detAprSolDescActForm.setEstadoNombre("Anulada");
			detAprSolDescActForm.setEstado("B");
			/* NOTIFICA AL SOLICITANTE */
			msgText = emailer.anulacionSolicitudMail(
					"solicitud de traslado a bodega", actSolicitud.getId()
							.getCodSolicitud().toString(), actSolicitud
							.getFecha_creacion(),
					"solicitud de traslado a bodega");
			usuarioDto = usuarioServices.getUsuarioDto(detAprSolDescActForm
					.getCodSolicitante());
			email
					.sendEmail(
							"UCA-SALDEI: Anulacion de Solicitud de Traslado a Bodega",
							"saldei@uca.edu.sv", new String[] { usuarioDto
									.getEmail() }, null, msgText, null);

			/* NOTIFICA AL ENCARGADO DE BODEGA */
			msgText = emailer.anulacionSolicitudMail(
					"solicitud de traslado a bodega", actSolicitud.getId()
							.getCodSolicitud().toString(), actSolicitud
							.getFecha_creacion(), "recibir traslado");
			actUnidad = actUnidadDAO.findById(Integer
					.valueOf(detAprSolDescActForm.getCodBodega()));
			usuarioDto = usuarioServices.getUsuarioDto(actUnidad
					.getCodResponsable());
			email
					.sendEmail(
							"UCA-SALDEI: Anulacion de Solicitud de Traslado a Bodega",
							"saldei@uca.edu.sv", new String[] { usuarioDto
									.getEmail() }, null, msgText, null);

			actSolicitudDAO.merge(actSolicitud);
			HibernateSessionFactory.getSession().beginTransaction().commit();
			errors.add("detAprDesc.mensaje.exito", new ActionError(
					"detAprDesc.mensaje.exito.anulada"));
			this.addErrors(request, errors);
		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		this.find(mapping, form, request, response);
		return mapping.findForward(target);
	}

}