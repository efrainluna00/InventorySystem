/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.inventario;

import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;
import org.hibernate.exception.ConstraintViolationException;

//import com.saldei.hibernate.tables.activos.ActPresupuestoDAO;
import com.saldei.hibernate.tables.inventario.InvTipoMovDAO;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.web.action.BaseAction;
//import com.saldei.web.form.activos.PresupuestoForm;
import com.saldei.web.form.inventario.TipoMovForm;

/** 
 * MyEclipse Struts
 * Creation date: 05-31-2009
 * 
 * XDoclet definition:
 * @struts.action path="/tipoMovAction" name="tipoMovForm" input="/html/inventario/tipoMov.jsp" parameter="accion" scope="request"
 * @struts.action-forward name="back" path="/tipoMovAction.do?accion=Find"
 * @struts.action-forward name="updateFail" path="/html/inventario/tipoMov.jsp"
 * @struts.action-forward name="success" path="/html/inventario/bodega.jsp?accion="
 */
public class TipoMovAction extends BaseAction {


	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
	    String target = KEY_SUCCESS;
	    
		TipoMovForm tipoMovForm = (TipoMovForm) form;
		InvTipoMovDAO invTipoMovDAO = new InvTipoMovDAO();				    
		
		try {
			tipoMovForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				invTipoMovDAO.delete(tipoMovForm.getInvTipoMov());
			    
			    HibernateSessionFactory.getSession().beginTransaction().commit();
				errors.add("tm.mensaje.exito", new ActionError("tm.mensaje.exito.delete"));
			}else{
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} 

		catch (ConstraintViolationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			errors.add("tm.mensajeError.error", new ActionError("tm.mensajeError.error.nodelete"));
			HibernateSessionFactory.getSession().beginTransaction().rollback();
		}
		catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
		}finally{
			HibernateSessionFactory.getSession().close();
		}
		
	    find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@SuppressWarnings("deprecation")
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		TipoMovForm tipoMovForm = (TipoMovForm) form;
		InvTipoMovDAO invTipoMovDAO = new InvTipoMovDAO();			
		
		HttpSession session = request.getSession(true);
	    String target = KEY_SUCCESS;
				    
	    
		try {
			tipoMovForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				if(invTipoMovDAO.findById(Integer.valueOf(tipoMovForm.getCodTipoMov()))==null){
				invTipoMovDAO.save(tipoMovForm.getInvTipoMov());
			    
			    HibernateSessionFactory.getSession().beginTransaction().commit();
				errors.add("tm.mensaje.exito", new ActionError("tm.mensaje.exito.insert"));
				}
					else
						errors.add("tm.mensajeError.error", new ActionError("tm.mensajeError.error.noinsert"));
					
			}else{
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		}finally{
			HibernateSessionFactory.getSession().close();
		}
		
	    find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		TipoMovForm tipoMovForm = (TipoMovForm) form;
		InvTipoMovDAO invTipoMovDAO = new InvTipoMovDAO();			
		
		HttpSession session = request.getSession(true);
	    String target = KEY_SUCCESS;					   			
		
		try {
			tipoMovForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
			    invTipoMovDAO.merge(tipoMovForm.getInvTipoMov());				  
			    HibernateSessionFactory.getSession().beginTransaction().commit();				
				errors.add("tm.mensaje.exito", new ActionError("tm.mensaje.exito.update"));
			}else{
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();				
			// TODO: handle exception
		}finally{
			HibernateSessionFactory.getSession().close();
		}
		
	    find(mapping, form, request, response);
		return mapping.findForward(target);
	}
	
	public ActionForward find(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception,
			ServletException {		
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data;
		
		TipoMovForm tipoMovForm = (TipoMovForm) form;
		InvTipoMovDAO invTipoMovDAO = new InvTipoMovDAO();
					
	    
		try {
							
			data = invTipoMovDAO.findAll();
		    request.setAttribute("listTipoMov", data);
			if(!isFLAG_UPDATE()){
				tipoMovForm.reset(mapping, request);
			}else{
				setFLAG_UPDATE(false);
			}			
			
		} catch (Exception e) {
			e.printStackTrace();			
			// TODO: handle exception
		}finally{
			HibernateSessionFactory.getSession().close();
		} 	
		return mapping.findForward(target);
	}
	
}