/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.inventario;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.saldei.hibernate.tables.Usuario;
import com.saldei.hibernate.tables.activos.ActActivo;
import com.saldei.hibernate.tables.activos.ActActivoDAO;
import com.saldei.hibernate.tables.activos.ActCotizacion;
import com.saldei.hibernate.tables.activos.ActCotizacionDAO;
import com.saldei.hibernate.tables.activos.ActSolicitud;
import com.saldei.hibernate.tables.activos.ActSolicitudDAO;
import com.saldei.hibernate.tables.activos.ActSolicitudId;
import com.saldei.hibernate.tables.activos.ActUnidad;
import com.saldei.hibernate.tables.inventario.InvBodega;
import com.saldei.hibernate.tables.inventario.InvDetMovActivo;
import com.saldei.hibernate.tables.inventario.InvDetMovActivoDAO;
import com.saldei.hibernate.tables.inventario.InvDetMovActivoId;
import com.saldei.hibernate.tables.inventario.InvDetMovimiento;
import com.saldei.hibernate.tables.inventario.InvDetMovimientoDAO;
import com.saldei.hibernate.tables.inventario.InvDetMovimientoId;
import com.saldei.hibernate.tables.inventario.InvMovimiento;
import com.saldei.hibernate.tables.inventario.InvMovimientoDAO;
import com.saldei.hibernate.tables.inventario.InvMovimientoId;
import com.saldei.hibernate.tables.inventario.InvRecurso;
import com.saldei.hibernate.tables.inventario.InvTipoMov;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.util.mail.Email;
import com.saldei.web.bean.seguridad.UsuarioDto;
import com.saldei.web.form.activos.AprSolCompraForm;
import com.saldei.web.form.inventario.IngOrdenCompraForm;
import com.saldei.web.services.seguridad.UsuarioServices;

/** 
 * MyEclipse Struts
 * Creation date: 07-31-2009
 * 
 * XDoclet definition:
 * @struts.action path="/ingOrdenCompraAction" name="ingOrdenCompraForm" input="/html/inventario/ingOrdenCompra.jsp" parameter="accion" scope="request"
 * @struts.action-forward name="updateFail" path="/html/inventario/ingOrdenCompra.jsp"
 * @struts.action-forward name="success" path="/html/inventario/ingOrdenCompra.jsp?accion="
 */
public class IngOrdenCompraAction extends LookupDispatchAction {
	/*
	 * Generated Methods
	 */
	
	protected Map getKeyMethodMap() {
        HashMap map = new HashMap();
        
		map.put("opc.find", "aprobadas");
        map.put("opc.insert", "insert");                        
        map.put("opc.enviarSolicitud", "enviar");
        map.put("opc.cancel", "enviar");
        map.put("opc.back", "aprobadas");
        
        return map;
  }

	/** 
	 * Method Aprobadas: busca todas las solicitudes con estado enviada para mostrarse en la pantalla de aprobacion
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward aprobadas(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HttpSession session = request.getSession(true);
		String target = "ingresar";
		List data;
		IngOrdenCompraForm ingOrdenCompraForm =  (IngOrdenCompraForm) form;// TODO Auto-generated method stub
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		String user;
				
		try {
			
			user =  (String) session.getAttribute("user");
			
			if(ingOrdenCompraForm.getMostrarHistorico()!=null && ingOrdenCompraForm.getMostrarHistorico().equals("S"))
				data = actSolicitudDAO.findAllSolicutudComprasAprobadas(user,"S");
			else
				data = actSolicitudDAO.findAllSolicutudComprasAprobadas(user,"N");
		    request.setAttribute("listSolComprasAprobadas", data);						
			
		} catch (Exception e) {
			e.printStackTrace();			
			// TODO: handle exception
		}finally{
			HibernateSessionFactory.getSession().close();
		} 	
		return mapping.findForward(target);
	}
	
	@SuppressWarnings("unchecked")
	public ActionForward enviar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HttpSession session = request.getSession(true);
		String target = "success";
		List data;
		IngOrdenCompraForm ingOrdenCompraForm = (IngOrdenCompraForm) form;// TODO Auto-generated method stub
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActCotizacion actCotizacion;
		UsuarioDto usuarioDto;
		UsuarioServices usuarioServices = new UsuarioServices();
		ActCotizacionDAO actCotizacionDAO = new ActCotizacionDAO();
		String accion = request.getParameter("accion");	
				
		try {
			ingOrdenCompraForm.setActSolicitud(actSolicitudDAO.findById(new ActSolicitudId(ingOrdenCompraForm.getTipoSolicitud(),Integer.valueOf(ingOrdenCompraForm.getCodSolicitud()))));
			actCotizacion = actCotizacionDAO.findByEstado(ingOrdenCompraForm.getTipoSolicitud(),String.valueOf(ingOrdenCompraForm.getCodSolicitud()));
			usuarioDto = usuarioServices.getUsuarioDto(ingOrdenCompraForm.getActSolicitud().getCodSolicitante());
			ingOrdenCompraForm.setSolicitante(usuarioDto.getPrimerNom()+" "+usuarioDto.getPrimerApe());
			if(actCotizacion!= null ){
				ingOrdenCompraForm.setActCotizacion(actCotizacion);				
				request.setAttribute("listCotDet", ingOrdenCompraForm.getActCotizacion().getActDetCotizacions());
			}else{
				ingOrdenCompraForm.reset(mapping, request);
			}
			if(accion.equals("Cancelar") ){
				ingOrdenCompraForm.reset(mapping, request);
			}
			
		} catch (Exception e) {
			e.printStackTrace();			
			// TODO: handle exception
		}finally{
			HibernateSessionFactory.getSession().close();
		} 	
		return mapping.findForward(target);
	}
	
	
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HttpSession session = request.getSession(true);
		String target = "success";
		/* movimiento de ingreso por solicitud de compra*/
		Integer codTipoMovimiento = 2;
		String msgText;
		IngOrdenCompraForm ingOrdenCompraForm = (IngOrdenCompraForm) form;// TODO Auto-generated method stub		
		ActActivoDAO actActivoDAO =  new ActActivoDAO();
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();		
		InvMovimientoDAO invMovimientoDAO = new InvMovimientoDAO();
		InvMovimiento invMovimiento =  new InvMovimiento();
		InvMovimiento invMovimientoNew =  new InvMovimiento();
		InvDetMovimientoDAO invDetMovimientoDAO = new InvDetMovimientoDAO();		
		InvBodega bodega = new InvBodega();		
		UsuarioDto  usuarioDto;
		Email email = new Email();
		InvDetMovActivoDAO invDetMovActivoDAO = new InvDetMovActivoDAO();
		//InvDetMovActivo invDetMovActivo = new InvDetMovActivo();
		//InvDetMovActivoDAO invDetMovActivoDAO = new InvDetMovActivoDAO();
		ActionErrors errors =  new ActionErrors();
		UsuarioServices usuarioServices = new UsuarioServices();
		int flagMovimiento = 0;
		int flagCompletado = 1;
		ActSolicitud actSolicitud= new ActSolicitud();
		
		try {
			
			ingOrdenCompraForm.validate(mapping, request, errors);
			
			if(errors.isEmpty()){

				/* se setean los valores para ingresar un movimiento*/
				ingOrdenCompraForm.setActSolicitud(actSolicitudDAO.findById(new ActSolicitudId(ingOrdenCompraForm.getTipoSolicitud(),ingOrdenCompraForm.getCodSolicitud())));
				bodega.setCodBodega(ingOrdenCompraForm.getActSolicitud().getCodBodega());
				invMovimiento.setInvBodega(bodega);
				invMovimiento.setCodSol(ingOrdenCompraForm.getCodSolicitud());
				invMovimiento.setTipoSol(ingOrdenCompraForm.getTipoSolicitud());			
				invMovimiento.setInvTipoMov(new InvTipoMov(codTipoMovimiento));
				invMovimiento.setId(new InvMovimientoId(0,0));
				int cantidad;
				Usuario user = (Usuario)request.getSession().getAttribute("usuario");
				/* se ingresa el movimiento*/
				invMovimientoDAO.save(invMovimiento,user.getIdUsuario());
				
				invMovimientoNew = invMovimientoDAO.findBySolicitud(ingOrdenCompraForm.getTipoSolicitud(),ingOrdenCompraForm.getCodSolicitud());
			
				for(int i=0;i < ingOrdenCompraForm.getCantidadIngresar().length;i++){
					InvDetMovimiento invDetMovimiento =  new InvDetMovimiento();
					String datos = ingOrdenCompraForm.getCantidadIngresar()[i];
					String[] valores = datos.split(",");	
					cantidad = (valores.length > 3)?Integer.valueOf(valores[3]):0;
					InvRecurso invRecurso =  new InvRecurso();
					/* se setean los valores para ingresar un detalle de movimiento*/
					invRecurso.setCodRecurso(valores[0]);
					invDetMovimiento.setCantidad(cantidad);
					invDetMovimiento.setId(new InvDetMovimientoId(invMovimientoNew, invRecurso ));
					
					/* se ingresa el detalle de  movimiento*/					
					if(cantidad != 0){
						invDetMovimientoDAO.save(invDetMovimiento,user.getIdUsuario());
						flagMovimiento = 1;
						
						for(int j=0;j < ingOrdenCompraForm.getNumSeries().length;j++){
							String datosSeries = ingOrdenCompraForm.getNumSeries()[j];
							String[] valoresSeries = datosSeries.split(",");
							
							if(valores[0].equals(valoresSeries[0])){
								ActActivo actActivo = new ActActivo();
								ActActivo actActivoNew = new ActActivo();								
								InvDetMovActivoId invDetMovActivoId; 
								InvDetMovActivo invDetMovActivo; 
								/* se setean los datos para el activo*/
								actActivo.setCodActivo(j);
								actActivo.setNumSerie(valoresSeries[1]);
								if(ingOrdenCompraForm.getActSolicitud().getAsigCompra().equals("S"))
									actActivo.setEstado("A");
								else{
									ActUnidad actUnidad = new ActUnidad();
									actUnidad.setCodUnidad(ingOrdenCompraForm.getActSolicitud().getCodBodega());
									actActivo.setActUnidad(actUnidad);
									actActivo.setEstado("N");
									
								}
									
								actActivo.setCodRecurso(valoresSeries[0]);
								
								/* se guarda el activo*/
								actActivoDAO.save(actActivo);
								
								actActivoNew = actActivoDAO.findByCodRecursoNew(actActivo.getCodRecurso());
								
								invDetMovActivoId =  new InvDetMovActivoId(invDetMovimiento,actActivoNew.getCodActivo());
								invDetMovActivo =  new InvDetMovActivo(invDetMovActivoId);								
								invDetMovActivoDAO.save(invDetMovActivo);
								
							}
						}															
					}
					
					if(cantidad+Integer.valueOf(valores[2]) != Integer.valueOf(valores[1])){
						flagCompletado = 0;
					}
				}				
				
			}
			
			if(flagCompletado == 1){
				
				if(ingOrdenCompraForm.getActSolicitud().getAsigCompra().equals("S"))
					ingOrdenCompraForm.getActSolicitud().setEstado("I");
				else
					ingOrdenCompraForm.getActSolicitud().setEstado("F");

				actSolicitudDAO.merge(ingOrdenCompraForm.getActSolicitud());
			}
			
			if(flagMovimiento == 1){
				actSolicitud = actSolicitudDAO.findById(ingOrdenCompraForm.getActSolicitud().getId());
				msgText = "Buen dia.<br><br>" +
				"Se le informa que la solicitud con codigo " + ingOrdenCompraForm.getCodSolicitud() + 
				"y creada en la fecha " + actSolicitud.getFecha_creacion() + " esta lista para su entrega." +  
				"<br>Para ver mas detalles consulte la opcion de solicitud de compra" +
				"<br>en el sistema SALDEI.<br><br>";
				msgText += "<br>--------------------------------------------------------------------" +
				"-------------------------------------------------------------------<br>" +
				"Este correo fue generado de manera automatica por el sistema SALDEI.<br>" +
				"Favor no responder a este correo.<br>Gracias.";
				usuarioDto = usuarioServices.getUsuarioDto(ingOrdenCompraForm.getCodSolicitante().toString());
				email.sendEmail("UCA-SALDEI: Ingreso de recurso solicitado", "saldei@uca.edu.sv", new String[]{usuarioDto.getEmail()}, null, msgText, null);
				HibernateSessionFactory.getSession().beginTransaction().commit();
				errors.add("ingSolCompra.mensaje.exito", new ActionError("ingSolCompra.mensaje.exito.ingreso"));
			}else{
				HibernateSessionFactory.getSession().beginTransaction().rollback();
				errors.add("ingSolCompra.mensaje.fallo", new ActionError("ingSolCompra.mensaje.fallo"));
			}
			
			/* se inserta el activo como no asignado */
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();			
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		}finally{
			HibernateSessionFactory.getSession().close();
			if(!errors.isEmpty()){
				saveErrors(request, errors);
			}
		} 	
		this.enviar(mapping, form, request, response);
		return mapping.findForward(target);
	}
}
