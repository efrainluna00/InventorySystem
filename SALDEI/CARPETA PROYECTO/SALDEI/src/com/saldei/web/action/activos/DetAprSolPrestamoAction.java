/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.activos;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;

import com.saldei.hibernate.tables.activos.ActDetSolicitudDAO;
import com.saldei.hibernate.tables.activos.ActSolicitud;
import com.saldei.hibernate.tables.activos.ActSolicitudDAO;
import com.saldei.util.commons.Constants;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.util.mail.Email;
import com.saldei.web.action.BaseAction;
import com.saldei.web.bean.Util;
import com.saldei.web.bean.seguridad.UsuarioDto;
import com.saldei.web.form.activos.AprSolPrestamoForm;
import com.saldei.web.form.activos.DetAprSolPrestamoForm;
import com.saldei.web.form.activos.DetalleSolPrestamoForm;
import com.saldei.web.services.administracion.ParametroServices;
import com.saldei.web.services.seguridad.UsuarioServices;

/**
 * MyEclipse Struts Creation date: 06-23-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/detAprSolPrestamoAction" name="detAprSolPrestamoForm"
 *                input="/html/activos/detAprSolPrestamo.jsp" parameter="accion"
 *                scope="request"
 * @struts.action-forward name="updateFail"
 *                        path="/html/activos/detAprSolPrestamo.jsp"
 * @struts.action-forward name="back" path="/aprSolPrestamoAction.do"
 * @struts.action-forward name="success"
 *                        path="/html/activos/detAprSolPrestamo.jsp?accion="
 * @struts.action-forward name="cancel"
 *                        path="/detAprSolPrestamoAction?accion=Find"
 */
public class DetAprSolPrestamoAction extends BaseAction {

	protected Map getKeyMethodMap() {
		HashMap map = (HashMap) super.getKeyMethodMap();
		map.put("opc.aprobar", "aprobar");
		map.put("opc.rechazar", "rechazar");
		map.put("opc.entregar", "entregar");
		map.put("opc.recibir", "recibir");
		map.put("opc.anular", "anular");
		return map;
	}

	@Override
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		return null;
	}

	public ActionForward aprobar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data, data2, sol, sol2;
		String cod, msgText;
		// ConfigEmail mail = new ConfigEmail();
		DetAprSolPrestamoForm detalleSolPrestamoForm = (DetAprSolPrestamoForm) form;
		AprSolPrestamoForm prestamo = new AprSolPrestamoForm();
		ActSolicitud actSolicitud;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActDetSolicitudDAO actDetSolicitudDAO = new ActDetSolicitudDAO();
		ActionErrors errors = new ActionErrors();
		UsuarioServices usuarioServices = new UsuarioServices();
		UsuarioDto usuarioDto;
		Email email = new Email();
		cod = (String) session.getAttribute("user");
		ParametroServices parametroServices = new ParametroServices();
		Util emailer = new Util();
		try {
			data2 = actSolicitudDAO.esJefe(cod);
			if (!data2.isEmpty()) {
				actSolicitud = actSolicitudDAO.findById(detalleSolPrestamoForm
						.getActSolicitud().getId());
				sol = actDetSolicitudDAO.revisarAct(actSolicitud
						.getFechaIniPrestamo(), actSolicitud
						.getFechaFinPrestamo(), actSolicitud.getId()
						.getCodSolicitud(), 1);
				sol2 = actDetSolicitudDAO.verificarAct(actSolicitud.getId()
						.getCodSolicitud(), detalleSolPrestamoForm
						.getCodUnidad());
				if (sol.isEmpty()) {
					if (sol2.isEmpty()) {
						actSolicitud.setEstado("A");
						actSolicitud.setMotivoRechazo(detalleSolPrestamoForm
								.getMotivoRechazo());
						detalleSolPrestamoForm.setEstadoNombre("Aprobada");
						detalleSolPrestamoForm.setEstado("A");
						request.setAttribute("DIREC", "NO");

						/* NOTIFICA AL SOLICITANTE */
						msgText = emailer.aprobacionPrestamosSolicitudMail(
								"solicitud de prestamo", detalleSolPrestamoForm
										.getCodSolicitud().toString(),
								actSolicitud.getFecha_creacion(),
								"solicitud de prestamo", actSolicitud
										.getComentario(),
								detalleSolPrestamoForm.getMotivoRechazo(), "S");
						usuarioDto = usuarioServices
								.getUsuarioDto(detalleSolPrestamoForm
										.getCodSolicitante());
						email
								.sendEmail(
										"UCA-SALDEI: Resolucion de Solicitud de Prestamo",
										"saldei@uca.edu.sv",
										new String[] { usuarioDto.getEmail() },
										null, msgText, null);

						/* NOTIFICA AL RESPONSABLE DEL RECURSO */
						msgText = emailer.aprobacionPrestamosSolicitudMail(
								"solicitud de prestamo", detalleSolPrestamoForm
										.getCodSolicitud().toString(),
								actSolicitud.getFecha_creacion(),
								"aprobacion de solicitud de prestamo",
								actSolicitud.getComentario(),
								detalleSolPrestamoForm.getMotivoRechazo(), "S");

						usuarioDto = usuarioServices.getUsuarioDto(actSolicitud
								.getCodPropietario());
						email
								.sendEmail(
										"UCA-SALDEI: Resolucion de Solicitud de Prestamo",
										"saldei@uca.edu.sv",
										new String[] { usuarioDto.getEmail() },
										null, msgText, null);
						actSolicitudDAO.merge(actSolicitud);
						HibernateSessionFactory.getSession().beginTransaction()
								.commit();
						errors.add("arprestamo.mensaje.exito", new ActionError(
								"arprestamo.mensaje.exito.aprobada"));
						this.addErrors(request, errors);
					} else {
						errors
								.add(
										"arprestamo.mensajeError.error",
										new ActionError(
												"arprestamo.mensajeError.error.noactivo"));
						this.addErrors(request, errors);
						request.setAttribute("AR", "NO");
					}
				} else {
					errors.add("arprestamo.mensajeError.error",
							new ActionError(
									"arprestamo.mensajeError.error.aprobada"));
					this.addErrors(request, errors);
					request.setAttribute("AR", "NO");
				}
			} else {
				actSolicitud = actSolicitudDAO.findById(detalleSolPrestamoForm
						.getActSolicitud().getId());
				sol = actDetSolicitudDAO.revisarAct(actSolicitud
						.getFechaIniPrestamo(), actSolicitud
						.getFechaFinPrestamo(), actSolicitud.getId()
						.getCodSolicitud(), 0);
				sol2 = actDetSolicitudDAO.verificarAct(actSolicitud.getId()
						.getCodSolicitud(), detalleSolPrestamoForm
						.getCodUnidad());
				if (sol.isEmpty()) {
					if (sol2.isEmpty()) {
						actSolicitud.setEstado("P");
						actSolicitud.setMotivoRechazo(detalleSolPrestamoForm
								.getMotivoRechazo());
						detalleSolPrestamoForm.setEstadoNombre("Aprobada");
						detalleSolPrestamoForm.setEstado("P");
						request.setAttribute("DIREC", "OK");
						// aprobacionPrestamosSolicitudMail(String nombreSol,
						// String codSol, String fechaCreacion,String
						// consulte,String descripcion,String resolucion, String
						// jefe){
						/* NOTIFICA AL JEFE */
						msgText = emailer.aprobacionPrestamosSolicitudMail(
								"solicitud de prestamo", detalleSolPrestamoForm
										.getCodSolicitud().toString(),
								actSolicitud.getFecha_creacion(),
								"aprobacion de solicitud de prestamo",
								actSolicitud.getComentario(),
								detalleSolPrestamoForm.getMotivoRechazo(), "N");
						usuarioDto = usuarioServices
								.getUsuarioDto(parametroServices
										.valorParametro(Constants.Parametro_JEFE_DEPTO));
						email
								.sendEmail(
										"UCA-SALDEI: Autorizacion para Solicitud de Prestamo",
										"saldei@uca.edu.sv",
										new String[] { usuarioDto.getEmail() },
										null, msgText, null);

						actSolicitudDAO.merge(actSolicitud);
						HibernateSessionFactory.getSession().beginTransaction()
								.commit();
						errors.add("arprestamo.mensaje.exito", new ActionError(
								"arprestamo.mensaje.exito.aprobada"));
						this.addErrors(request, errors);
					} else {
						errors
								.add(
										"arprestamo.mensajeError.error",
										new ActionError(
												"arprestamo.mensajeError.error.noactivo"));
						this.addErrors(request, errors);
						request.setAttribute("AR", "NO");
					}
				} else {
					errors.add("arprestamo.mensajeError.error",
							new ActionError(
									"arprestamo.mensajeError.error.aprobada"));
					this.addErrors(request, errors);
					request.setAttribute("AR", "NO");
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		this.find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward rechazar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		String msgText;
		List data, data2;
		// ConfigEmail mail = new ConfigEmail();
		DetAprSolPrestamoForm detalleSolPrestamoForm = (DetAprSolPrestamoForm) form;
		DetalleSolPrestamoForm prestamo = new DetalleSolPrestamoForm();
		ActSolicitud actSolicitud;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActionErrors errors = new ActionErrors();
		UsuarioServices usuarioServices = new UsuarioServices();
		UsuarioDto usuarioDto;
		Email email = new Email();
		Util emailer = new Util();
		String esJefe, cod;
		cod = (String) session.getAttribute("user");

		try {

			actSolicitud = actSolicitudDAO.findById(detalleSolPrestamoForm
					.getActSolicitud().getId());
			actSolicitud.setMotivoRechazo(detalleSolPrestamoForm
					.getMotivoRechazo());
			actSolicitud.setEstado("R");
			detalleSolPrestamoForm.setEstadoNombre("Rechazada");
			detalleSolPrestamoForm.setEstado("R");
			data2 = actSolicitudDAO.esJefe(cod);
			esJefe = !data2.isEmpty() ? "S" : "N";
			msgText = emailer.rechazoPrestamosSolicitudMail(
					"solicitud de prestamo", detalleSolPrestamoForm
							.getCodSolicitud().toString(), actSolicitud
							.getFecha_creacion(), "solicitud de prestamo",
					actSolicitud.getComentario(), detalleSolPrestamoForm
							.getMotivoRechazo(), esJefe);
			if (esJefe.equals("S")) {
				/* NOTIFICA AL SOLICITANTE */
				usuarioDto = usuarioServices
						.getUsuarioDto(detalleSolPrestamoForm
								.getCodSolicitante());
				email.sendEmail(
						"UCA-SALDEI: Resolucion de Solicitud de Prestamo",
						"saldei@uca.edu.sv", new String[] { usuarioDto
								.getEmail() }, null, msgText, null);

				/* NOTIFICA AL RESPONSABLE DE RECURSO */
				msgText = emailer.rechazoPrestamosSolicitudMail(
						"solicitud de prestamo", detalleSolPrestamoForm
								.getCodSolicitud().toString(), actSolicitud
								.getFecha_creacion(),
						"aprobacion de solicitud de prestamo", actSolicitud
								.getComentario(), detalleSolPrestamoForm
								.getMotivoRechazo(), esJefe);
				usuarioDto = usuarioServices.getUsuarioDto(actSolicitud
						.getCodPropietario());
				email.sendEmail(
						"UCA-SALDEI: Resolucion de Solicitud de Prestamo",
						"saldei@uca.edu.sv", new String[] { usuarioDto
								.getEmail() }, null, msgText, null);

			} else {
				/* NOTIFICA AL SOLICITANTE */
				usuarioDto = usuarioServices
						.getUsuarioDto(detalleSolPrestamoForm
								.getCodSolicitante());
				email.sendEmail(
						"UCA-SALDEI: Resolucion de Solicitud de Prestamo",
						"saldei@uca.edu.sv", new String[] { usuarioDto
								.getEmail() }, null, msgText, null);
			}

			actSolicitudDAO.merge(actSolicitud);
			HibernateSessionFactory.getSession().beginTransaction().commit();
			errors.add("arprestamo.mensaje.exito", new ActionError(
					"arprestamo.mensaje.exito.rechazada"));
			this.addErrors(request, errors);
		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		this.find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward anular(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		String msgText;
		List data, data2;
		// ConfigEmail mail = new ConfigEmail();
		DetAprSolPrestamoForm detalleSolPrestamoForm = (DetAprSolPrestamoForm) form;
		DetalleSolPrestamoForm prestamo = new DetalleSolPrestamoForm();
		ActSolicitud actSolicitud;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActionErrors errors = new ActionErrors();
		UsuarioServices usuarioServices = new UsuarioServices();
		UsuarioDto usuarioDto;
		Email email = new Email();
		Util emailer = new Util();
		String esJefe, cod;
		cod = (String) session.getAttribute("user");
		ParametroServices parametroServices = new ParametroServices();

		try {

			actSolicitud = actSolicitudDAO.findById(detalleSolPrestamoForm
					.getActSolicitud().getId());
			actSolicitud.setMotivoRechazo(detalleSolPrestamoForm
					.getMotivoRechazo());
			actSolicitud.setEstado("B");
			detalleSolPrestamoForm.setEstadoNombre("Anulada");
			detalleSolPrestamoForm.setEstado("B");
			data2 = actSolicitudDAO.esJefe(cod);
			esJefe = !data2.isEmpty() ? "S" : "N";

			if (esJefe.equals("S")) {
				/* NOTIFICA AL SOLICITANTE */
				msgText = emailer.anulacionSolicitudMail(
						"solicitud de prestamo", detalleSolPrestamoForm
								.getCodSolicitud().toString(), actSolicitud
								.getFecha_creacion(), "solicitud de prestamo");
				usuarioDto = usuarioServices
						.getUsuarioDto(detalleSolPrestamoForm
								.getCodSolicitante());
				email.sendEmail(
						"UCA-SALDEI: Anulacion de Solicitud de Prestamo",
						"saldei@uca.edu.sv", new String[] { usuarioDto
								.getEmail() }, null, msgText, null);

				/* NOTIFICA AL RESPONSABLE */
				msgText = emailer.anulacionSolicitudMail(
						"solicitud de prestamo", detalleSolPrestamoForm
								.getCodSolicitud().toString(), actSolicitud
								.getFecha_creacion(),
						"aprobacion de solicitud de prestamo");
				usuarioDto = usuarioServices.getUsuarioDto(actSolicitud
						.getCodPropietario());
				email.sendEmail(
						"UCA-SALDEI: Anulacion de Solicitud de Prestamo",
						"saldei@uca.edu.sv", new String[] { usuarioDto
								.getEmail() }, null, msgText, null);
			} else {

				/* NOTIFICA AL SOLICITANTE */
				msgText = emailer.anulacionSolicitudMail(
						"solicitud de prestamo", detalleSolPrestamoForm
								.getCodSolicitud().toString(), actSolicitud
								.getFecha_creacion(), "solicitud de prestamo");
				usuarioDto = usuarioServices
						.getUsuarioDto(detalleSolPrestamoForm
								.getCodSolicitante());
				email.sendEmail(
						"UCA-SALDEI: Anulacion de Solicitud de Prestamo",
						"saldei@uca.edu.sv", new String[] { usuarioDto
								.getEmail() }, null, msgText, null);

				/* NOTIFICA AL JEFE */
				msgText = emailer.anulacionSolicitudMail(
						"solicitud de prestamo", detalleSolPrestamoForm
								.getCodSolicitud().toString(), actSolicitud
								.getFecha_creacion(),
						"aprobacion de solicitud de prestamo");
				usuarioDto = usuarioServices.getUsuarioDto(parametroServices
						.valorParametro(Constants.Parametro_JEFE_DEPTO));
				email.sendEmail(
						"UCA-SALDEI: Anulacion de Solicitud de Prestamo",
						"saldei@uca.edu.sv", new String[] { usuarioDto
								.getEmail() }, null, msgText, null);

			}

			actSolicitudDAO.merge(actSolicitud);
			HibernateSessionFactory.getSession().beginTransaction().commit();
			errors.add("arprestamo.mensaje.exito", new ActionError(
					"arprestamo.mensaje.exito.anulada"));
			this.addErrors(request, errors);
		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		this.find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward find(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data, data2;
		String cod;

		DetAprSolPrestamoForm detAprSolPrestamoForm = (DetAprSolPrestamoForm) form;
		ActDetSolicitudDAO actDetSolicitudDAO = new ActDetSolicitudDAO();

		ActSolicitud actSolicitud;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		cod = (String) session.getAttribute("user");

		try {

			data2 = actSolicitudDAO.esJefe(cod);
			if (data2.isEmpty()) {
				request.setAttribute("DIREC", "OK");
			} else
				request.setAttribute("DIREC", "NO");
			data = actDetSolicitudDAO.findAll(detAprSolPrestamoForm
					.getCodSolicitud());
			request.setAttribute("listDetPrestamos", data);

			if (!isFLAG_UPDATE()) {
				detAprSolPrestamoForm.reset(mapping, request);
			} else {
				setFLAG_UPDATE(false);
			}
			// detallePptoForm.setCodPresupuesto(codppto);

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		return mapping.findForward(target);
	}

	public ActionForward entregar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data, data2;
		// ConfigEmail mail = new ConfigEmail();
		DetAprSolPrestamoForm detalleSolPrestamoForm = (DetAprSolPrestamoForm) form;
		ActDetSolicitudDAO actDetSolicitudDAO = new ActDetSolicitudDAO();
		AprSolPrestamoForm prestamo = new AprSolPrestamoForm();
		ActSolicitud actSolicitud;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActionErrors errors = new ActionErrors();
		try {

			actSolicitud = actSolicitudDAO.findById(detalleSolPrestamoForm
					.getActSolicitud().getId());
			actSolicitud.setEstado("D");
			detalleSolPrestamoForm.setEstadoNombre("Entregado");
			detalleSolPrestamoForm.setEstado("D");
			// mail.notificarEmail("blanca.fifi@hotmail.com","prueba de envio",
			// "prestamo");
			// setCodPropietario(detalleSolPrestamoForm.getCodPropietario());
			actSolicitudDAO.merge(actSolicitud);
			actDetSolicitudDAO.modActivos(detalleSolPrestamoForm
					.getActSolicitud().getId().getCodSolicitud(), "P");
			HibernateSessionFactory.getSession().beginTransaction().commit();
			errors.add("arprestamo.mensaje.exito", new ActionError(
					"arprestamo.mensaje.exito.entregados"));
			this.addErrors(request, errors);
		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		this.find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward recibir(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data, data2;
		// ConfigEmail mail = new ConfigEmail();
		DetAprSolPrestamoForm detalleSolPrestamoForm = (DetAprSolPrestamoForm) form;
		ActDetSolicitudDAO actDetSolicitudDAO = new ActDetSolicitudDAO();
		AprSolPrestamoForm prestamo = new AprSolPrestamoForm();
		ActSolicitud actSolicitud;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActionErrors errors = new ActionErrors();
		try {

			actSolicitud = actSolicitudDAO.findById(detalleSolPrestamoForm
					.getActSolicitud().getId());
			actSolicitud.setEstado("F");
			detalleSolPrestamoForm.setEstadoNombre("Finalizado");
			detalleSolPrestamoForm.setEstado("F");
			// mail.notificarEmail("blanca.fifi@hotmail.com","prueba de envio",
			// "prestamo");
			// setCodPropietario(detalleSolPrestamoForm.getCodPropietario());
			actSolicitudDAO.merge(actSolicitud);
			actDetSolicitudDAO.modActivos(detalleSolPrestamoForm
					.getActSolicitud().getId().getCodSolicitud(), "A");
			HibernateSessionFactory.getSession().beginTransaction().commit();
			errors.add("arprestamo.mensaje.exito", new ActionError(
					"arprestamo.mensaje.exito.recibidos"));
			this.addErrors(request, errors);
		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		this.find(mapping, form, request, response);
		return mapping.findForward(target);
	}

}