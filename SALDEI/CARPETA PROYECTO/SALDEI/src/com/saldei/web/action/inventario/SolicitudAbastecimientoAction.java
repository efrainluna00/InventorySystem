/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.inventario;

import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;
import org.hibernate.exception.ConstraintViolationException;

import com.saldei.hibernate.tables.activos.ActSolicitudDAO;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.web.action.BaseAction;
import com.saldei.web.form.activos.SolDescActForm;
import com.saldei.web.form.inventario.SolicitudAbastecimientoForm;

/** 
 * MyEclipse Struts
 * Creation date: 07-07-2009
 * 
 * XDoclet definition:
 * @struts.action path="/solicitudAbastecimientoAction" name="solicitudAbastecimientoForm" input="/html/inventario/solicitudAbastecimiento.jsp" parameter="accion" scope="request"
 * @struts.action-forward name="updateFail" path="/html/inventario/solicitudAbastecimiento.jsp"
 * @struts.action-forward name="back" path="/solicitudAbastecimientoAction.do?accion=Find"
 * @struts.action-forward name="success" path="/html/inventario/solicitudAbastecimiento.jsp?accion="
 */
public class SolicitudAbastecimientoAction extends BaseAction  {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@SuppressWarnings("deprecation")
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
	    String target = KEY_SUCCESS;
	    
		SolicitudAbastecimientoForm solicitudAbastecimientoForm = (SolicitudAbastecimientoForm) form;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();				    
		
		try {
				solicitudAbastecimientoForm.getActSolicitud().getId().setTipoSolicitud("A");
				actSolicitudDAO.delete(solicitudAbastecimientoForm.getActSolicitud());			    
			    HibernateSessionFactory.getSession().beginTransaction().commit();
				errors.add("solaba.mensaje.exito", new ActionError("solaba.mensaje.exito.delete"));
			
		} 
		catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
		}finally{
			HibernateSessionFactory.getSession().close();
		}
		
	    find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@SuppressWarnings("deprecation")
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub

		SolicitudAbastecimientoForm solicitudAbastecimientoForm = (SolicitudAbastecimientoForm) form;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();	
	
		
		HttpSession session = request.getSession(true);
	    String target = KEY_SUCCESS;
	    
	    try {
			solicitudAbastecimientoForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				solicitudAbastecimientoForm.getActSolicitud().getId().setTipoSolicitud("A");
				solicitudAbastecimientoForm.getActSolicitud().setEstado("G");
				solicitudAbastecimientoForm.getActSolicitud().setComentario(solicitudAbastecimientoForm.getComentario());
				actSolicitudDAO.save(solicitudAbastecimientoForm.getActSolicitud());
			    HibernateSessionFactory.getSession().beginTransaction().commit();
				errors.add("solaba.mensaje.exito", new ActionError("solaba.mensaje.exito.insert"));
			}else{
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		}finally{
			HibernateSessionFactory.getSession().close();
		}
		
	    find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {

	// TODO Auto-generated method stub

	SolicitudAbastecimientoForm solicitudAbastecimientoForm = (SolicitudAbastecimientoForm) form;
	ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();	
	HttpSession session = request.getSession(true);
    String target = KEY_SUCCESS;
    
    try {
		solicitudAbastecimientoForm.validate(mapping, request, errors);
		if (errors.isEmpty()) {
			solicitudAbastecimientoForm.getActSolicitud().setComentario(solicitudAbastecimientoForm.getComentario());
			actSolicitudDAO.merge(solicitudAbastecimientoForm.getActSolicitud());
		    HibernateSessionFactory.getSession().beginTransaction().commit();
			errors.add("solaba.mensaje.exito", new ActionError("solaba.mensaje.exito.update"));
		}else{
			setFLAG_UPDATE(true);
		}
	} catch (Exception e) {
		e.printStackTrace();
		HibernateSessionFactory.getSession().beginTransaction().rollback();
		// TODO: handle exception
	}finally{
		HibernateSessionFactory.getSession().close();
	}
	
    find(mapping, form, request, response);
	return mapping.findForward(target);
		}
	
	
	public ActionForward find(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception,
			ServletException {		
		String target = KEY_SUCCESS;
		HttpSession session = request.getSession(true);
		
		
		List data;
		
		SolicitudAbastecimientoForm solicitudAbastecimientoForm = (SolicitudAbastecimientoForm) form;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		
	    
		try {
				
			data = actSolicitudDAO.AbastecimientoFindSolicitudes(session.getAttribute("user").toString());
		    request.setAttribute("listaSolAba", data);
		 			  
		    //TipoUnidadForm f = (TipoUnidadForm) listaTipoUnidad;
		    //unidadForm.setActTipoUnidad(f);
		    
			if(!isFLAG_UPDATE()){
				solicitudAbastecimientoForm.reset(mapping, request);
			}else{
				setFLAG_UPDATE(false);
			}			
			
		} catch (Exception e) {
			e.printStackTrace();			
			// TODO: handle exception
		}finally{
			HibernateSessionFactory.getSession().close();
		} 	
		return mapping.findForward(target);
	}
}