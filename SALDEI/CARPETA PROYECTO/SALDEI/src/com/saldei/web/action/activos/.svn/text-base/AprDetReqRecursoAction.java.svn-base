/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.activos;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;


import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;

import com.saldei.hibernate.tables.activos.ActDetSolicitudDAO;
import com.saldei.hibernate.tables.activos.ActSolicitud;
import com.saldei.hibernate.tables.activos.ActSolicitudDAO;
import com.saldei.hibernate.tables.activos.ActSolicitudId;
import com.saldei.hibernate.tables.activos.ActUnidad;
import com.saldei.hibernate.tables.activos.ActUnidadDAO;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.util.mail.Email;
import com.saldei.web.action.BaseAction;
import com.saldei.web.bean.Util;
import com.saldei.web.bean.seguridad.UsuarioDto;
import com.saldei.web.form.activos.AprDetReqRecursoForm;
import com.saldei.web.services.administracion.ParametroServices;
import com.saldei.web.services.seguridad.UsuarioServices;

/**
 * MyEclipse Struts Creation date: 07-01-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/aprDetReqRecurso" name="aprDetReqRecursoForm"
 *                input="/html/activos/aprDetReqRecurso.jsp" scope="request"
 * @struts.action-forward name="updateFail"
 *                        path="/html/activos/aprDetReqRecurso.jsp"
 */
public class AprDetReqRecursoAction extends BaseAction {

	protected Map getKeyMethodMap() {
		HashMap map = (HashMap) super.getKeyMethodMap();
		map.put("opc.aprobar", "aprobar");
		map.put("opc.rechazar", "rechazar");
		map.put("opc.anular", "anular");

		return map;
	}

	@Override
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		return null;

	}

	@Override
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub

		return null;

	}

	@Override
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		return null;

	}

	public ActionForward find(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data;

		AprDetReqRecursoForm aprDetReqRecursoForm = (AprDetReqRecursoForm) form;
		ActDetSolicitudDAO actDetSolicitudDAO = new ActDetSolicitudDAO();
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();

		try {

			aprDetReqRecursoForm.getActDetSolicitud().getId().setActSolicitud(
					actSolicitudDAO.findById(new ActSolicitudId(
							aprDetReqRecursoForm.getTipoSolicitud(),
							aprDetReqRecursoForm.getCodSolicitud())));
			data = actDetSolicitudDAO
					.findAllAprDetReqRecurso((aprDetReqRecursoForm
							.getCodSolicitud()));
			request.setAttribute("listDetRequisicion", data);
			if (!isFLAG_UPDATE()) {
				aprDetReqRecursoForm.reset(mapping, request);
			} else {
				setFLAG_UPDATE(false);
			}

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		return mapping.findForward(target);
	}

	/*
	 * protected Map getKeyMethodMap() { HashMap map = (HashMap)
	 * super.getKeyMethodMap();
	 * 
	 *  //<html:submit property="accion" styleId="enviarSolicitud"> //<bean:message
	 * key="opc.enviarSolicitud" />
	 * 
	 * map.put("opc.enviarSolicitud", "enviarRequisicion");
	 * 
	 * return map; }
	 */

	public ActionForward aprobar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data, data2;
		String msgText;
		UsuarioServices usuarioServices = new UsuarioServices();
		UsuarioDto usuarioDto;
		Email email = new Email();
		ParametroServices parametroServices = new ParametroServices();
		ActUnidadDAO actUnidadDAO = new ActUnidadDAO();
		ActUnidad actUnidad;
		AprDetReqRecursoForm aprDetReqRecursoForm = (AprDetReqRecursoForm) form;
		ActSolicitud actSolicitud;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActionErrors errors = new ActionErrors();
		Util emailer = new Util();
		try {

			actSolicitud = actSolicitudDAO.findById(aprDetReqRecursoForm
					.getActSolicitud().getId());
			actSolicitud.setEstado("A");
			actSolicitud.setMotivoRechazo(aprDetReqRecursoForm
					.getMotivoRechazo());
			aprDetReqRecursoForm.setDesEstado("Aprobada");
			aprDetReqRecursoForm.setEstado("A");
			actSolicitudDAO.merge(actSolicitud);
			/* NOTIFICACION PARA EL SOLICITANTE */
			msgText = emailer.aprobacionSolicitudMail(
					"requisicion de recursos", actSolicitud.getId()
							.getCodSolicitud().toString(), actSolicitud
							.getFecha_creacion(), "requisicion de recursos",
					actSolicitud.getComentario(), aprDetReqRecursoForm
							.getMotivoRechazo(), "S", "");
			usuarioDto = usuarioServices.getUsuarioDto(actSolicitud
					.getCodSolicitante());
			email
					.sendEmail(
							"UCA-SALDEI: Resolucion de Requisicion de Recursos",
							"saldei@uca.edu.sv", new String[] { usuarioDto
									.getEmail() }, null, msgText, null);

			/* NOTIFICACION PARA EL ENCARGADO DE RECURSO */
			msgText = emailer.aprobacionSolicitudMail(
					"requisicion de recursos", actSolicitud.getId()
							.getCodSolicitud().toString(), actSolicitud
							.getFecha_creacion(),
					"salida por solicitud de recursos", actSolicitud
							.getComentario(), aprDetReqRecursoForm
							.getMotivoRechazo(), "N", "recursos");
			actUnidad = actUnidadDAO.findById(Integer
					.valueOf(aprDetReqRecursoForm.getCodBodega()));
			usuarioDto = usuarioServices.getUsuarioDto(actUnidad
					.getCodResponsable());
			email
					.sendEmail(
							"UCA-SALDEI: Resolucion de Requisicion de Recursos",
							"saldei@uca.edu.sv", new String[] { usuarioDto
									.getEmail() }, null, msgText, null);
			HibernateSessionFactory.getSession().beginTransaction().commit();
			errors.add("aprDetReq.mensaje.exito", new ActionError(
					"aprDetReq.mensaje.exito.aceptada"));
			this.addErrors(request, errors);
		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		this.find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward rechazar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		String msgText;
		UsuarioServices usuarioServices = new UsuarioServices();
		UsuarioDto usuarioDto;
		Email email = new Email();
		AprDetReqRecursoForm aprDetReqRecursoForm = (AprDetReqRecursoForm) form;
		ActSolicitud actSolicitud;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActionErrors errors = new ActionErrors();
		Util emailer = new Util();
		try {

			actSolicitud = actSolicitudDAO.findById(aprDetReqRecursoForm
					.getActSolicitud().getId());
			actSolicitud.setMotivoRechazo(aprDetReqRecursoForm
					.getMotivoRechazo());
			actSolicitud.setEstado("R");
			aprDetReqRecursoForm.setDesEstado("Rechazada");
			aprDetReqRecursoForm.setEstado("R");
			msgText = emailer.rechazoSolicitudMail(
					"solicitud de requisicion de recursos", actSolicitud
							.getId().getCodSolicitud().toString(), actSolicitud
							.getFecha_creacion(), actSolicitud.getComentario(),
					aprDetReqRecursoForm.getMotivoRechazo());
			usuarioDto = usuarioServices.getUsuarioDto(actSolicitud
					.getCodSolicitante());
			email
					.sendEmail(
							"UCA-SALDEI: Resolucion de Requisicion de Recursos",
							"saldei@uca.edu.sv", new String[] { usuarioDto
									.getEmail() }, null, msgText, null);
			actSolicitudDAO.merge(actSolicitud);
			HibernateSessionFactory.getSession().beginTransaction().commit();
			errors.add("aprDetReq.mensaje.exito", new ActionError(
					"aprDetReq.mensaje.exito.rechazada"));
			this.addErrors(request, errors);
		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		this.find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward anular(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		String msgText;
		UsuarioServices usuarioServices = new UsuarioServices();
		UsuarioDto usuarioDto;
		Email email = new Email();
		AprDetReqRecursoForm aprDetReqRecursoForm = (AprDetReqRecursoForm) form;
		ActSolicitud actSolicitud;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActionErrors errors = new ActionErrors();
		Util emailer = new Util();
		ActUnidad actUnidad = new ActUnidad();
		ActUnidadDAO actUnidadDAO = new ActUnidadDAO();
		try {

			actSolicitud = actSolicitudDAO.findById(aprDetReqRecursoForm
					.getActSolicitud().getId());
			actSolicitud.setEstado("B");
			aprDetReqRecursoForm.setEstado("B");
			/* NOTIFICA AL SOLICITANTE */
			msgText = emailer
					.anulacionSolicitudMail("requisicion de recursos",
							actSolicitud.getId().getCodSolicitud().toString(),
							actSolicitud.getFecha_creacion(),
							"requisicion de recursos");
			usuarioDto = usuarioServices.getUsuarioDto(actSolicitud
					.getCodSolicitante());
			email
					.sendEmail(
							"UCA-SALDEI: Anulacion de Requisicion de Recursos",
							"saldei@uca.edu.sv", new String[] { usuarioDto
									.getEmail() }, null, msgText, null);

			/* NOTIFICA AL ENCARGADO DE BODEGA */
			msgText = emailer.anulacionSolicitudMail("requisicion de recursos",
					actSolicitud.getId().getCodSolicitud().toString(),
					actSolicitud.getFecha_creacion(),
					"salida por solicitud de recursos");
			actUnidad = actUnidadDAO.findById(Integer.valueOf(actSolicitud
					.getCodBodega()));
			usuarioDto = usuarioServices.getUsuarioDto(actUnidad
					.getCodResponsable());
			email
					.sendEmail(
							"UCA-SALDEI: Anulacion de Requisicion de Recursos",
							"saldei@uca.edu.sv", new String[] { usuarioDto
									.getEmail() }, null, msgText, null);
			actSolicitudDAO.merge(actSolicitud);
			HibernateSessionFactory.getSession().beginTransaction().commit();
			errors.add("aprDetReq.mensaje.exito", new ActionError(
					"aprDetReq.mensaje.exito.anular"));
			this.addErrors(request, errors);
		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		this.find(mapping, form, request, response);
		return mapping.findForward(target);
	}

}