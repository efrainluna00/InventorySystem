/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.activos;

import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;

import com.saldei.hibernate.tables.activos.ActCotizacion;
import com.saldei.hibernate.tables.activos.ActCotizacionDAO;
import com.saldei.hibernate.tables.activos.ActCotizacionId;
import com.saldei.hibernate.tables.activos.ActDetCotizacionDAO;
import com.saldei.hibernate.tables.activos.ActSolicitud;
import com.saldei.hibernate.tables.activos.ActSolicitudDAO;
import com.saldei.hibernate.tables.activos.ActSolicitudId;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.web.action.BaseAction;
import com.saldei.web.form.activos.CotizacionDetForm;
import com.saldei.web.form.activos.CotizacionForm;

/**
 * MyEclipse Struts Creation date: 07-01-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/cotizacionDetAction" name="cotizacionDetForm"
 *                input="/html/activos/cotizacionDet.jsp" parameter="accion"
 *                scope="request"
 * @struts.action-forward name="back" path="/cotizacionAction.do?accion=Find"
 * @struts.action-forward name="updateFail"
 *                        path="/html/activos/cotizacionDet.jsp"
 * @struts.action-forward name="success"
 *                        path="/html/activos/cotizacionDet.jsp?accion="
 * @struts.action-forward name="cancel"
 *                        path="/cotizacionDetAction.do?accion=Find"
 */
public class CotizacionDetAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward find(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CotizacionDetForm cotizacionDetForm = (CotizacionDetForm) form;// TODO
																		// Auto-generated
																		// method
																		// stub
		ActDetCotizacionDAO actDetCotizacionDAO = new ActDetCotizacionDAO();
		ActCotizacionDAO actCotizacionDAO = new ActCotizacionDAO();
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActCotizacion actCotizacion;
		ActSolicitud actSolicitud;

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data;

		try {

			/* para guardar la configuracion del grid papa */
			request.setAttribute("numeroPagina", request
					.getParameter("numeroPagina"));
			request.setAttribute("nombreGrid", request
					.getParameter("nombreGrid"));
			request.setAttribute("cantidadPagina", request
					.getParameter("cantidadPagina"));

			request.setAttribute("numeroPagina1", request
					.getParameter("numeroPagina1"));
			request.setAttribute("nombreGrid1", request
					.getParameter("nombreGrid1"));
			request.setAttribute("cantidadPagina1", request
					.getParameter("cantidadPagina1"));

			data = actDetCotizacionDAO.findAll(cotizacionDetForm
					.getCodCotizacion(), cotizacionDetForm.getCodSolicitud(),
					cotizacionDetForm.getTipoSolicitud());

			request.setAttribute("listCotDet", data);
			if (!isFLAG_UPDATE()) {
				actSolicitud = actSolicitudDAO.findById(new ActSolicitudId(
						cotizacionDetForm.getTipoSolicitud(), Integer
								.valueOf(cotizacionDetForm.getCodSolicitud())));
				actCotizacion = actCotizacionDAO.findById(new ActCotizacionId(
						actSolicitud, Integer.valueOf(cotizacionDetForm
								.getCodCotizacion())));
				cotizacionDetForm.reset(mapping, request);
				cotizacionDetForm.getId().setActCotizacion(actCotizacion);
				cotizacionDetForm.getId().getActCotizacion().getId()
						.setActSolicitud(actSolicitud);
				if (data != null && !data.isEmpty()) {
					actCotizacion.setEstado("G");
				} else {
					actCotizacion.setEstado("C");
				}
				actCotizacionDAO.merge(actCotizacion);
			} else {
				setFLAG_UPDATE(false);
			}

			HibernateSessionFactory.getSession().beginTransaction().commit();

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		return mapping.findForward(target);
	}

	@Override
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		CotizacionDetForm cotizacionDetForm = (CotizacionDetForm) form;// TODO
																		// Auto-generated
																		// method
																		// stub
		ActDetCotizacionDAO actDetCotizacionDAO = new ActDetCotizacionDAO();

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data;

		try {
			cotizacionDetForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				actDetCotizacionDAO.delete(cotizacionDetForm
						.getActDetCotizacion());
				HibernateSessionFactory.getSession().beginTransaction()
						.commit();

				errors.add("cotizacionDet.mensaje.exito", new ActionError(
						"cotizacionDet.mensaje.exito.delete"));
			} else {
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@Override
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		CotizacionDetForm cotizacionDetForm = (CotizacionDetForm) form;// TODO
																		// Auto-generated
																		// method
																		// stub
		ActDetCotizacionDAO actDetCotizacionDAO = new ActDetCotizacionDAO();
		ActCotizacionDAO actCotizacionDAO = new ActCotizacionDAO();
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActCotizacion actCotizacion;
		ActSolicitud actSolicitud;

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		try {
			cotizacionDetForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {

				actDetCotizacionDAO.save(cotizacionDetForm
						.getActDetCotizacion());

				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("cotizacionDet.mensaje.exito", new ActionError(
						"cotizacionDet.mensaje.exito.insert"));
			} else {
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@Override
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		CotizacionDetForm cotizacionDetForm = (CotizacionDetForm) form;// TODO
																		// Auto-generated
																		// method
																		// stub
		ActDetCotizacionDAO actDetCotizacionDAO = new ActDetCotizacionDAO();

		String target = KEY_SUCCESS;

		try {
			cotizacionDetForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {

				actDetCotizacionDAO.merge(cotizacionDetForm
						.getActDetCotizacion());
				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("cotizacionDet.mensaje.exito", new ActionError(
						"cotizacionDet.mensaje.exito.update"));
			} else {
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward back(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {

		ActCotizacionDAO actCotizacionDAO = new ActCotizacionDAO();
		ActCotizacion actCotizacion;
		CotizacionForm cotizacionForm = new CotizacionForm();

		CotizacionDetForm a = (CotizacionDetForm) form;
		// form.reset(mapping,request);
		actCotizacion = actCotizacionDAO.findById(a.getId().getActCotizacion()
				.getId());

		cotizacionForm.setActCotizacion(actCotizacion);

		request.setAttribute("flagBack", "lnk"
				+ String.valueOf(a.getCodCotizacion()));
		return mapping.findForward(KEY_BACK);
	}

}