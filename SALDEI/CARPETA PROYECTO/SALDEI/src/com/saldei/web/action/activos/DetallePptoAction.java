/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.activos;

import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;

import com.saldei.hibernate.tables.Usuario;
import com.saldei.hibernate.tables.activos.ActDetPresupuestoDAO;
import com.saldei.hibernate.tables.activos.ActPresupuesto;
import com.saldei.hibernate.tables.activos.ActPresupuestoDAO;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.web.action.BaseAction;
import com.saldei.web.form.activos.DetallePptoForm;
import com.saldei.web.form.activos.PresupuestoForm;

/**
 * MyEclipse Struts Creation date: 06-09-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/detallePptoAction" name="detallePptoForm"
 *                input="/html/activos/detallePpto.jsp" parameter="accion"
 *                scope="request"
 * @struts.action-forward name="updateFail" path="/html/activos/detallePpto.jsp"
 * @struts.action-forward name="success"
 *                        path="/html/activos/detallePpto.jsp?accion="
 */
public class DetallePptoAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	@Override
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		Usuario user = (Usuario) request.getSession().getAttribute("usuario");
		DetallePptoForm detallePptoForm = (DetallePptoForm) form;
		ActDetPresupuestoDAO actDetPresupuestoDAO = new ActDetPresupuestoDAO();

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		try {
			detallePptoForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				actDetPresupuestoDAO.delete(detallePptoForm
						.getActDetPresupuesto(), user.getIdUsuario());

				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("detpresupuesto.mensaje.exito", new ActionError(
						"detpresupuesto.mensaje.exito.delete"));
			} else {
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@Override
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		Usuario user = (Usuario) request.getSession().getAttribute("usuario");
		DetallePptoForm detallePptoForm = (DetallePptoForm) form;
		ActDetPresupuestoDAO actDetPresupuestoDAO = new ActDetPresupuestoDAO();
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		try {
			detallePptoForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				detallePptoForm.setSaldoActual(detallePptoForm.getMonto());
				detallePptoForm.setUsuarioMov(user.getIdUsuario());
				actDetPresupuestoDAO.save(detallePptoForm
						.getActDetPresupuesto(), user.getIdUsuario());

				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("detpresupuesto.mensaje.exito", new ActionError(
						"detpresupuesto.mensaje.exito.insert"));
			} else {
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@Override
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		Usuario user = (Usuario) request.getSession().getAttribute("usuario");
		DetallePptoForm detallePptoForm = (DetallePptoForm) form;
		ActDetPresupuestoDAO actDetPresupuestoDAO = new ActDetPresupuestoDAO();

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		try {
			detallePptoForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				if (detallePptoForm.actualizacionValida()) {
					// detallePptoForm.getActDetPresupuesto().setSaldoActual(detallePptoForm.getActDetPresupuesto().getMonto());
					actDetPresupuestoDAO.merge(detallePptoForm
							.getActDetPresupuesto(), user.getIdUsuario());
					HibernateSessionFactory.getSession().beginTransaction()
							.commit();
					errors.add("detpresupuesto.mensaje.exito", new ActionError(
							"detpresupuesto.mensaje.exito.update"));
				} else
					errors
							.add(
									"detpresupuesto.mensajeError.error",
									new ActionError(
											"detpresupuesto.mensajeError.error.noupdate"));
			} else {
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward find(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data;

		DetallePptoForm detallePptoForm = (DetallePptoForm) form;
		ActDetPresupuestoDAO actDetPresupuestoDAO = new ActDetPresupuestoDAO();
		ActPresupuesto actPresupuesto;
		ActPresupuestoDAO actPresupuestoDAO = new ActPresupuestoDAO();

		try {
			/* para guardar la configuracion del grid papa */
			request.setAttribute("numeroPagina", request
					.getParameter("numeroPagina"));
			request.setAttribute("nombreGrid", request
					.getParameter("nombreGrid"));
			request.setAttribute("cantidadPagina", request
					.getParameter("cantidadPagina"));

			actPresupuesto = actPresupuestoDAO.findById(detallePptoForm
					.getCodPresupuesto());
			data = actDetPresupuestoDAO.findAll(detallePptoForm
					.getCodPresupuesto());
			request.setAttribute("listDetPresupuesto", data);
			// int codppto = detallePptoForm.getCodPresupuesto();
			if (!isFLAG_UPDATE()) {
				detallePptoForm.reset(mapping, request);
			} else {
				setFLAG_UPDATE(false);
			}
			// detallePptoForm.setCodPresupuesto(codppto);

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		return mapping.findForward(target);
	}

	public ActionForward back(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		ActPresupuestoDAO actPresupuestoDAO = new ActPresupuestoDAO();
		ActPresupuesto actPresupuesto;
		PresupuestoForm presupuestoForm = new PresupuestoForm();

		// form.reset(mapping,request);
		DetallePptoForm detallePptoForm = (DetallePptoForm) form;

		actPresupuesto = actPresupuestoDAO.findById(detallePptoForm
				.getCodPresupuesto());

		presupuestoForm.setActPresupuesto(actPresupuesto);

		request.setAttribute("flagBack", "lnk"
				+ String.valueOf(detallePptoForm.getCodPresupuesto()));
		return mapping.findForward(KEY_BACK);
	}

}