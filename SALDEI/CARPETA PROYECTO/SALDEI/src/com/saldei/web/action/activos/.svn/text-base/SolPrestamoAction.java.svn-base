/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.activos;

import java.text.SimpleDateFormat;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;
import org.hibernate.exception.ConstraintViolationException;

import com.saldei.hibernate.tables.activos.ActSolicitud;
import com.saldei.hibernate.tables.activos.ActSolicitudDAO;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.web.action.BaseAction;
import com.saldei.web.form.activos.SolPrestamoForm;

/**
 * MyEclipse Struts Creation date: 06-08-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/solPrestamoAction" name="solPrestamoForm"
 *                input="/html/activos/solPrestamo.jsp" parameter="accion"
 *                scope="request"
 * @struts.action-forward name="back" path="/solPrestamoAction.do?accion=Find"
 * @struts.action-forward name="updateFail" path="/html/activos/solPrestamo.jsp"
 * @struts.action-forward name="success"
 *                        path="/html/activos/solPrestamo.jsp?accion="
 */
public class SolPrestamoAction extends BaseAction {

	@Override
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		SolPrestamoForm solPrestamoForm = (SolPrestamoForm) form;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();

		try {
			solPrestamoForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				actSolicitudDAO.delete(solPrestamoForm.getActSolicitud());

				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("prestamo.mensaje.exito", new ActionError(
						"prestamo.mensaje.exito.delete"));
			} else {
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} catch (ConstraintViolationException e) {
			e.printStackTrace();
			errors.add("prestamo.mensajeError.error", new ActionError(
					"prestamo.mensajeError.error.nodelete"));
			HibernateSessionFactory.getSession().beginTransaction().rollback();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@Override
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		SolPrestamoForm solPrestamoForm = (SolPrestamoForm) form;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd");
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		try {
			solPrestamoForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {

				solPrestamoForm.getActSolicitud().setEstado("G");
				// solPrestamoForm.getActSolicitud().setFecha_ini(sdf.p(solPrestamoForm.getActSolicitud().getFechaIniPrestamo()));
				// solPrestamoForm.getActSolicitud().setFechaIniPrestamo(sdf.parse(solPrestamoForm.getActSolicitud().getFecha_ini()));
				actSolicitudDAO.save(solPrestamoForm.getActSolicitud());

				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("prestamo.mensaje.exito", new ActionError(
						"prestamo.mensaje.exito.insert"));
			} else {
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@Override
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		SolPrestamoForm solPrestamoForm = (SolPrestamoForm) form;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		try {
			solPrestamoForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				actSolicitudDAO.merge(solPrestamoForm.getActSolicitud());
				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("prestamo.mensaje.exito", new ActionError(
						"prestamo.mensaje.exito.update"));
			} else {
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward find(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		String solicitante, codSolicitante;
		List data;
		ActSolicitud actSolicitud;
		SolPrestamoForm solPrestamoForm = (SolPrestamoForm) form;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();

		codSolicitante = (String) session.getAttribute("user");
		try {

			data = actSolicitudDAO.findAll(codSolicitante);

			request.setAttribute("listSolicitud", data);
			if (!isFLAG_UPDATE()) {
				// actSolicitud =
				// actSolicitudDAO.findById(solPrestamoForm.getActSolicitud().getId());
				// if(!actSolicitud.getActDetSolicituds().isEmpty())
				// request.setAttribute("BAND", "NO");
				solPrestamoForm.reset(mapping, request);
			} else {
				setFLAG_UPDATE(false);
			}

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		return mapping.findForward(target);
	}

	/*
	 * public void revisar(String codSol){ List solicitud; ActSolicitudDAO
	 * actSolicitudDAO = new ActSolicitudDAO(); ActDetSolicitudDAO
	 * actDetSolicitud = new ActDetSolicitudDAO(); HttpServletRequest request =
	 * null; try{ solicitud = actDetSolicitud.findBySolicitud("P",
	 * Integer.valueOf(codSol)); if(!solicitud.isEmpty())
	 * request.setAttribute("BAND", "NO");
	 * 
	 * }catch (Exception e) { e.printStackTrace(); // TODO: handle exception
	 * }finally{ HibernateSessionFactory.getSession().close(); } }
	 */

}