/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.activos;

import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;
import org.hibernate.exception.ConstraintViolationException;

import com.saldei.util.mail.Email;

import com.saldei.hibernate.tables.Usuario;
import com.saldei.hibernate.tables.activos.ActPresupuesto;
import com.saldei.hibernate.tables.activos.ActPresupuestoDAO;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.web.action.BaseAction;
import com.saldei.web.form.activos.PresupuestoForm;

/**
 * MyEclipse Struts Creation date: 05-25-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/presupuestoAction" name="presupuestoForm"
 *                input="/html/activos/presupuesto.jsp" parameter="accion"
 *                scope="request" validate="true"
 * @struts.action-forward name="success" path="/html/activos/presupuesto.jsp"
 * @struts.action-forward name="fail" path="/html/activos/presupuesto.jsp"
 */
public class PresupuestoAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		Usuario user = (Usuario) request.getSession().getAttribute("usuario");
		PresupuestoForm presupuestoForm = (PresupuestoForm) form;
		ActPresupuestoDAO actPresupuestoDAO = new ActPresupuestoDAO();
		ActPresupuesto actPresupuesto = new ActPresupuesto();

		actPresupuesto = actPresupuestoDAO.findById(presupuestoForm
				.getCodPresupuesto());
		actPresupuesto.setUsuarioMov(user.getIdUsuario());
		actPresupuestoDAO.merge(actPresupuesto);
		HibernateSessionFactory.getSession().beginTransaction().commit();
		HibernateSessionFactory.getSession().close();

		try {
			presupuestoForm.validateBorra(mapping, request, errors);
			if (errors.isEmpty()) {

				actPresupuestoDAO.delete(presupuestoForm.getActPresupuesto());
				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("presupuesto.mensaje.exito", new ActionError(
						"presupuesto.mensaje.exito.delete"));
			} else {
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} catch (ConstraintViolationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			errors.add("ppto.mensajeError.error", new ActionError(
					"ppto.mensajeError.error.nodelete"));
			HibernateSessionFactory.getSession().beginTransaction().rollback();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@SuppressWarnings("deprecation")
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		Usuario user = (Usuario) request.getSession().getAttribute("usuario");
		PresupuestoForm presupuestoForm = (PresupuestoForm) form;
		ActPresupuestoDAO actPresupuestoDAO = new ActPresupuestoDAO();
		ActPresupuesto actPresupuesto = new ActPresupuesto();

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data;

		try {
			presupuestoForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				// Para auditoria
				presupuestoForm.getActPresupuesto().setUsuarioMov(
						user.getIdUsuario());
				actPresupuestoDAO.save(presupuestoForm.getActPresupuesto());
				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("presupuesto.mensaje.exito", new ActionError(
						"presupuesto.mensaje.exito.insert"));
			} else {
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		Usuario user = (Usuario) request.getSession().getAttribute("usuario");
		PresupuestoForm presupuestoForm = (PresupuestoForm) form;
		ActPresupuestoDAO actPresupuestoDAO = new ActPresupuestoDAO();

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		try {
			presupuestoForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				// Para auditoria
				presupuestoForm.getActPresupuesto().setUsuarioMov(
						user.getIdUsuario());
				actPresupuestoDAO.merge(presupuestoForm.getActPresupuesto());
				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("presupuesto.mensaje.exito", new ActionError(
						"presupuesto.mensaje.exito.update"));
			} else {
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward find(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data;
		Email email = new Email();

		PresupuestoForm presupuestoForm = (PresupuestoForm) form;
		ActPresupuestoDAO actPresupuestoDAO = new ActPresupuestoDAO();

		String[] To = new String[1];
		To[0] = "jorge.hernandez@aeroman.com.sv";

		// email.sendEmail("TITULO","jd.dario@gmail.com", To , null, "prueba de
		// mail", null);
		// email.sendEmail("TITULO","SALDEI@uca.edu.sv",new
		// String[]{"jd.dario@gmail.com","efrainluna@gmail.com","blancaf@gmail.com","boris.ernesto85@gmail.com"},null,"mensaje
		// de prueba",null);
		try {

			data = actPresupuestoDAO.findAll();
			request.setAttribute("listPresupuesto", data);
			if (!isFLAG_UPDATE()) {
				presupuestoForm.reset(mapping, request);
			} else {
				setFLAG_UPDATE(false);
			}

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		return mapping.findForward(target);
	}

}