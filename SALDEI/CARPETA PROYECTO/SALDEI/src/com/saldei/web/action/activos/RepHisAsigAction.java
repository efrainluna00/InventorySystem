/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.activos;

import java.io.IOException;
import java.sql.SQLException;
import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.jasperreports.engine.JRException;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.saldei.hibernate.tables.Usuario;
import com.saldei.util.commons.Querys;
import com.saldei.util.jdbc.JdbcHelper;
import com.saldei.web.action.seguridad.GenerarReportesAction;
import com.saldei.web.form.activos.RepHisAsigForm;

import com.saldei.web.services.administracion.RptCommonServices;

/**
 * MyEclipse Struts Creation date: 06-26-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/repAsigActualesAction" name="repAsigActualesForm"
 *                input="/html/activos/repAsigActuales.jsp" parameter="accion"
 *                scope="request" validate="true"
 * @struts.action-forward name="success"
 *                        path="/html/activos/repAsigActuales.jsp"
 */
public class RepHisAsigAction extends DispatchAction {
	JdbcHelper jdbcCon = new JdbcHelper();
	Querys utilQuerys = new Querys();
	RptCommonServices commonservices = new RptCommonServices();

	/**
	 * Inicializa los campos de la pantalla de Reporte de Laboratorio
	 * 
	 * @param mapping
	 *            ActionMapping
	 * @param form
	 *            ActionForm
	 * @param request
	 *            HttpServletRequest
	 * @param response
	 *            HttpServletResponse
	 * @return
	 */
	public ActionForward inicio(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RepHisAsigForm repHisAsigForm = (RepHisAsigForm) form;
		repHisAsigForm.setCodActivo("%");
		repHisAsigForm.setActivoDesc("Todos los Recursos");
		try {
			Usuario usr = (Usuario) request.getSession()
					.getAttribute("usuario");
			/** Verficica si el Usuario esta en session es valido */
			if (usr == null)
				return mapping.findForward("login");
		} catch (Exception e) {
			e.printStackTrace();
			// return mapping.findForward("ioError");
		}
		return mapping.findForward("success");
	}

	public ActionForward rptMovRecurso(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws JRException, IOException, SQLException {
		ActionErrors errors = new ActionErrors();
		GenerarReportesAction gRpt = new GenerarReportesAction();
		RepHisAsigForm repHisAsigForm = (RepHisAsigForm) form;
		repHisAsigForm.validate(mapping, request, errors);
		if (repHisAsigForm.getFlagTarget() != null
				&& repHisAsigForm.getFlagTarget().equals("")) {

			if (errors.isEmpty()) {
				repHisAsigForm.setFlagTarget("false");
				return mapping.findForward("updateFail");
			}
		}
		if (errors.isEmpty()) {

			String formato = repHisAsigForm.getFormato();
			Usuario user = (Usuario) request.getSession().getAttribute(
					"usuario");
			String usuario = "";
			String codUsu = user.getIdUsuario();

			if (user == null)
				usuario = "Sin Informacion";
			else
				usuario = user.getPrimerNom() + " " + user.getPrimerApe();
			String ruta;
			ruta = this.getServlet().getServletContext().getRealPath(
					"reportesJasper/hist_asignaciones.jasper");
			HashMap<String, String> parameters = new HashMap<String, String>();
			// parameters.put("pQuery",queryString);
			// parameters.put("pUsuario",usuario);
			parameters.put("p_fecha_ini", repHisAsigForm.getFecha_ini());
			parameters.put("p_fecha_fin", repHisAsigForm.getFecha_fin());
			if (repHisAsigForm.getCodActivo() != null
					&& !repHisAsigForm.getCodActivo().trim().equals("")
					&& !repHisAsigForm.getCodActivo().equals("%")) {
				parameters.put("p_activo", repHisAsigForm.getCodActivo());
			}

			return gRpt.rptUsuario(mapping, form, request, response, formato,
					ruta, parameters);
		}
		if (!errors.isEmpty()) {
			this.saveErrors(request, errors);
		}
		return mapping.findForward("updateFail");

	}

}