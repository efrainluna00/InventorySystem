/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.activos;

import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;

import com.saldei.hibernate.tables.Usuario;
import com.saldei.hibernate.tables.activos.ActDetSolicitudDAO;
import com.saldei.hibernate.tables.activos.ActSolicitud;
import com.saldei.hibernate.tables.activos.ActSolicitudDAO;
import com.saldei.hibernate.tables.activos.ActUnidad;
import com.saldei.hibernate.tables.activos.ActUnidadDAO;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.util.mail.Email;
import com.saldei.web.action.BaseAction;
import com.saldei.web.bean.seguridad.UsuarioDto;
import com.saldei.web.form.activos.DetalleSolPrestamoForm;
import com.saldei.web.form.activos.SolPrestamoForm;
import com.saldei.web.services.administracion.ParametroServices;
import com.saldei.web.services.seguridad.UsuarioServices;

/**
 * MyEclipse Struts Creation date: 06-13-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/detalleSolPrestamoAction" name="detalleSolPrestamoForm"
 *                input="/html/activos/detalleSolPrestamo.jsp"
 *                parameter="accion" scope="request"
 * @struts.action-forward name="updateFail"
 *                        path="/html/activos/detalleSolPrestamo.jsp"
 * @struts.action-forward name="back" path="solPrestamoAction.do?accion=Find"
 * @struts.action-forward name="success"
 *                        path="/html/activos/detalleSolPrestamo.jsp?accion="
 * @struts.action-forward name="cancel"
 *                        path="/detallleSolPrestamoAction?accion=Find"
 */
public class DetalleSolPrestamoAction extends BaseAction {
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

	protected Map getKeyMethodMap() {
		HashMap map = (HashMap) super.getKeyMethodMap();
		map.put("opc.findup", "findUp");
		map.put("opc.enviarSolicitud", "enviarPrestamo");
		return map;
	}

	@Override
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		DetalleSolPrestamoForm detalleSolPrestamoForm = (DetalleSolPrestamoForm) form;
		ActDetSolicitudDAO actDetSolicitudDAO = new ActDetSolicitudDAO();

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		try {
			detalleSolPrestamoForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				actDetSolicitudDAO.delete(detalleSolPrestamoForm
						.getActDetSolicitud());

				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("detprestamo.mensaje.exito", new ActionError(
						"detprestamo.mensaje.exito.delete"));
			} else {
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@Override
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List sol;
		DetalleSolPrestamoForm detalleSolPrestamoForm = (DetalleSolPrestamoForm) form;
		ActDetSolicitudDAO actDetSolicitudDAO = new ActDetSolicitudDAO();
		ActSolicitud solicitud;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();

		try {
			detalleSolPrestamoForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				// detalleSolPrestamoForm.getCodSolicitud();
				// solicitud =
				// actSolicitudDAO.findById(detalleSolPrestamoForm.getActSolicitud().getId());
				// System.out.println(solicitud.getFechaIniPrestamo());
				// sol =
				// actDetSolicitudDAO.revisarAct(detalleSolPrestamoForm.getCodActivo(),solicitud.getFechaIniPrestamo(),solicitud.getFechaFinPrestamo());
				// if(sol.isEmpty()){
				actDetSolicitudDAO.save(detalleSolPrestamoForm
						.getActDetSolicitud());
				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("detprestamo.mensaje.exito", new ActionError(
						"detprestamo.mensaje.exito.insert"));
				// }else errors.add("detprestamo.mensajeError.error", new
				// ActionError("detprestamo.mensajeError.error.noinsert"));
			} else {
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);

	}

	@Override
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		return null;
	}

	public ActionForward enviarPrestamo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data, data2;

		UsuarioDto usuario;
		ParametroServices parametroServices = new ParametroServices();
		Email email = new Email();
		String msgText;
		UsuarioServices usuarioServices = new UsuarioServices();
		Usuario user = (Usuario) request.getSession().getAttribute("usuario");

		DetalleSolPrestamoForm detalleSolPrestamoForm = (DetalleSolPrestamoForm) form;
		SolPrestamoForm prestamo = new SolPrestamoForm();
		ActSolicitud actSolicitud;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActionErrors errors = new ActionErrors();
		actSolicitud = actSolicitudDAO.findById(detalleSolPrestamoForm
				.getActSolicitud().getId());
		if (!actSolicitud.getActDetSolicituds().isEmpty()) {

			try {
				msgText = "Buen dia.<br><br>"
						+ "Se le informa que el usuario "
						+ user.getPrimerNom()
						+ " "
						+ user.getPrimerApe()
						+ " ha enviado una solicitud de prestamo<br>"
						+ "con codigo "
						+ actSolicitud.getId().getCodSolicitud()
						+ " y creada en la fecha "
						+ actSolicitud.getFecha_creacion()
						+ ".<br>Para ver mas detalles y "
						+ "aprobar o rechazar dicha solicitud,<br> consulte la opcion de aprobacion de solicitud de pretamo"
						+ " en el sistema SALDEI.<br><br>";
				if (detalleSolPrestamoForm.getComentario2() != null
						&& !detalleSolPrestamoForm.getComentario2().trim()
								.equals(""))
					msgText += "El usuario " + user.getPrimerNom() + " "
							+ user.getPrimerApe()
							+ " especifico; la siguiente descripcion:<br>"
							+ "\"" + detalleSolPrestamoForm.getComentario2()
							+ "\"";
				msgText += "<br>--------------------------------------------------------------------"
						+ "-------------------------------------------------------------------<br>"
						+ "Este correo fue generado de manera automatica por el sistema SALDEI.<br>"
						+ "Favor no responder a este correo.<br>Gracias.";
				usuario = usuarioServices.getUsuarioDto(detalleSolPrestamoForm
						.getCodPropietario2());
				email.sendEmail("UCA-SALDEI: Solicitud de Prestamo",
						"saldei@uca.edu.sv",
						new String[] { usuario.getEmail() }, null, msgText,
						null);
				actSolicitud.setEstado("E");
				detalleSolPrestamoForm.setEstado2("E");
				detalleSolPrestamoForm.setEstadoNombre("Enviada");
				actSolicitudDAO.merge(actSolicitud);
				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("detprestamo.mensaje.exito", new ActionError(
						"detprestamo.mensaje.exito.enviar"));
				this.addErrors(request, errors);
			} catch (Exception e) {
				e.printStackTrace();
				HibernateSessionFactory.getSession().beginTransaction()
						.rollback();
				// TODO: handle exception
			} finally {
				HibernateSessionFactory.getSession().close();
			}
		}// endif isEmpty
		else {
			errors.add("detprestamo.mensajeError.error", new ActionError(
					"detprestamo.mensajeError.error.noenviar"));
			this.addErrors(request, errors);
			target = "updateFail";
		}
		this.find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward find(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data, data2;

		DetalleSolPrestamoForm detalleSolPrestamoForm = (DetalleSolPrestamoForm) form;
		ActDetSolicitudDAO actDetSolicitudDAO = new ActDetSolicitudDAO();
		ActSolicitud actSolicitud;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		try {

			/* para guardar la configuracion del grid papa */
			request.setAttribute("numeroPagina", request
					.getParameter("numeroPagina"));
			request.setAttribute("nombreGrid", request
					.getParameter("nombreGrid"));
			request.setAttribute("cantidadPagina", request
					.getParameter("cantidadPagina"));

			data = actDetSolicitudDAO.findAll(detalleSolPrestamoForm
					.getCodSolicitud2());

			if (!data.isEmpty())
				request.setAttribute("listDetPrestamos", data);
			data2 = actDetSolicitudDAO.findAllActivos(detalleSolPrestamoForm
					.getCodPropietario2(), detalleSolPrestamoForm
					.getActSolicitud().getId().getCodSolicitud(),
					detalleSolPrestamoForm.getCodUnidad2());
			request.setAttribute("listActivos", data2);

			if (!isFLAG_UPDATE()) {
				detalleSolPrestamoForm.reset(mapping, request);
			} else {
				setFLAG_UPDATE(false);
			}
			// detallePptoForm.setCodPresupuesto(codppto);

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		return mapping.findForward(target);
	}

	public ActionForward findUp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data, data2;

		DetalleSolPrestamoForm detalleSolPrestamoForm = (DetalleSolPrestamoForm) form;
		ActSolicitud actSolicitud;
		ActUnidad actUnidad;
		ActUnidadDAO actUnidadDAO = new ActUnidadDAO();
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();

		try {

			/* para guardar la configuracion del grid papa */
			request.setAttribute("numeroPagina", request
					.getParameter("numeroPagina"));
			request.setAttribute("nombreGrid", request
					.getParameter("nombreGrid"));
			request.setAttribute("cantidadPagina", request
					.getParameter("cantidadPagina"));

			actSolicitud = actSolicitudDAO.findById(detalleSolPrestamoForm
					.getActSolicitud().getId());
			actUnidad = actUnidadDAO.findById(detalleSolPrestamoForm
					.getCodUnidad2());
			actSolicitud.setCodPropietario(detalleSolPrestamoForm
					.getCodPropietario2());
			actSolicitud.setActUnidad(actUnidad);
			actSolicitudDAO.merge(actSolicitud);
			HibernateSessionFactory.getSession().beginTransaction().commit();
		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		this.find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward back(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {

		// form.reset(mapping,request);
		DetalleSolPrestamoForm a = (DetalleSolPrestamoForm) form;

		request
				.setAttribute("flagBack", "lnk"
						+ String.valueOf(a.getActSolicitud().getId()
								.getCodSolicitud()));
		return mapping.findForward(KEY_BACK);
	}
}