/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.inventario;

import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;

import com.saldei.hibernate.tables.Usuario;
import com.saldei.hibernate.tables.activos.ActActivo;
import com.saldei.hibernate.tables.activos.ActActivoDAO;
import com.saldei.hibernate.tables.activos.ActSolicitudDAO;
import com.saldei.hibernate.tables.activos.ActSolicitudId;
import com.saldei.hibernate.tables.activos.ActUnidad;
import com.saldei.hibernate.tables.inventario.InvBodega;
import com.saldei.hibernate.tables.inventario.InvDetMovActivo;
import com.saldei.hibernate.tables.inventario.InvDetMovActivoDAO;
import com.saldei.hibernate.tables.inventario.InvDetMovActivoId;
import com.saldei.hibernate.tables.inventario.InvDetMovimiento;
import com.saldei.hibernate.tables.inventario.InvDetMovimientoDAO;
import com.saldei.hibernate.tables.inventario.InvDetMovimientoId;
import com.saldei.hibernate.tables.inventario.InvMovimiento;
import com.saldei.hibernate.tables.inventario.InvMovimientoDAO;
import com.saldei.hibernate.tables.inventario.InvMovimientoId;
import com.saldei.hibernate.tables.inventario.InvRecurso;
import com.saldei.hibernate.tables.inventario.InvRecursoDAO;
import com.saldei.hibernate.tables.inventario.InvTipoMov;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.web.action.BaseAction;
import com.saldei.web.form.inventario.MovAjusteInvForm;
import com.saldei.web.form.inventario.RecursoForm;

/**
 * MyEclipse Struts Creation date: 08-09-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/movAjusteInvAction" name="movAjusteInvForm"
 *                input="/html/inventario/movAjusteInv.jsp" parameter="accion"
 *                scope="request"
 * @struts.action-forward name="updateFail"
 *                        path="/html/inventario/movAjusteInv.jsp"
 * @struts.action-forward name="success"
 *                        path="/html/inventario/movAjusteInv.jsp?accion="
 */
public class MovAjusteInvAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	public ActionForward find(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		// HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data;

		MovAjusteInvForm movAjusteInvForm = (MovAjusteInvForm) form;
		InvRecursoDAO invRecursoDAO = new InvRecursoDAO();
		String user;

		try {
			
			user = (String) request.getSession().getAttribute("user");
			
			data = invRecursoDAO.findAllByUser(user);
			request.setAttribute("listRecurso", data);
			if (!isFLAG_UPDATE()) {
				movAjusteInvForm.reset(mapping, request);
			} else {
				setFLAG_UPDATE(false);
			}

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		return mapping.findForward(target);
	}

	@Override
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		String target = "success";
		MovAjusteInvForm movAjusteInvForm = (MovAjusteInvForm) form;
		
		movAjusteInvForm.validate(mapping, request, errors);
		if(errors.isEmpty()){
			if (movAjusteInvForm.getConsumible().equals("N")) {
				this.deleteSerializables(mapping, form, request, response, errors);
			} else {
				this.suministros(mapping, form, request, response, errors);
			}
		}else{
			target = "updateFail";
			setFLAG_UPDATE(true);
		}
		

		this.find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@Override
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		String target = KEY_SUCCESS;
		MovAjusteInvForm movAjusteInvForm = (MovAjusteInvForm) form;

		movAjusteInvForm.validate(mapping, request, errors);
		if(errors.isEmpty()){
			
			if (movAjusteInvForm.getConsumible().equals("N") && movAjusteInvForm.getCodTipoMov() != 6) {
				this.insertSerializables(mapping, form, request, response, errors);
			} else 
			if(movAjusteInvForm.getConsumible().equals("N") && movAjusteInvForm.getCodTipoMov() == 6){
				this.insertSerializablesTralado(mapping, form, request, response, errors);
			}else{
				this.suministros(mapping, form, request, response, errors);
			}
			
		}else{
			target = "updateFail";
			setFLAG_UPDATE(true);
		}
		


		this.find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@SuppressWarnings("deprecation")
	public ActionForward suministros(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors) throws Exception, ServletException {

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		MovAjusteInvForm movAjusteInvForm = (MovAjusteInvForm) form;

		ActActivoDAO actActivoDAO = new ActActivoDAO();
		InvMovimientoDAO invMovimientoDAO = new InvMovimientoDAO();
		InvMovimiento invMovimiento = new InvMovimiento();
		InvMovimiento invMovimientoNew = new InvMovimiento();
		InvDetMovimientoDAO invDetMovimientoDAO = new InvDetMovimientoDAO();
		InvBodega bodega = new InvBodega();

		InvDetMovActivoDAO invDetMovActivoDAO = new InvDetMovActivoDAO();
		// InvDetMovActivo invDetMovActivo = new InvDetMovActivo();

		try {
			movAjusteInvForm.validate(mapping, request, errors);
			
			if(errors.isEmpty()){

				/* se setean los valores para ingresar un movimiento */
				bodega.setCodBodega(Integer
						.valueOf(movAjusteInvForm.getCodBodega()));
				invMovimiento.setInvBodega(bodega);
				invMovimiento.setInvTipoMov(new InvTipoMov(movAjusteInvForm
						.getCodTipoMov()));
				invMovimiento.setComentario(movAjusteInvForm.getComentario());
				invMovimiento.setId(new InvMovimientoId(0, 0));
				int cantidad;
				Usuario user = (Usuario) request.getSession().getAttribute(
						"usuario");
				/* se ingresa el movimiento */
				invMovimientoDAO.save(invMovimiento, user.getIdUsuario());
				invMovimientoNew = invMovimientoDAO.findLast();
				InvDetMovimiento invDetMovimiento = new InvDetMovimiento();
				InvRecurso invRecurso = new InvRecurso();
				/* se setean los valores para ingresar un detalle de movimiento */
				invRecurso.setCodRecurso(movAjusteInvForm.getCodRecurso());
				invDetMovimiento.setCantidad(movAjusteInvForm.getCantidad());
				invDetMovimiento.setId(new InvDetMovimientoId(invMovimientoNew,
						invRecurso));
				invDetMovimientoDAO.save(invDetMovimiento, user.getIdUsuario());

				HibernateSessionFactory.getSession().beginTransaction().commit();
				
				errors.add("ajuste.mensaje.exito", new ActionError(
					"ajuste.mensaje.exito.insert"));
			}else{
				setFLAG_UPDATE(true);
			}
			

		} catch (Exception e) {
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		return mapping.findForward(target);
	}

	@SuppressWarnings("deprecation")
	public ActionForward insertSerializables(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response, ActionErrors errors)
			throws Exception, ServletException {

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		MovAjusteInvForm movAjusteInvForm = (MovAjusteInvForm) form;

		ActActivoDAO actActivoDAO = new ActActivoDAO();
		InvMovimientoDAO invMovimientoDAO = new InvMovimientoDAO();
		InvMovimiento invMovimiento = new InvMovimiento();
		InvMovimiento invMovimientoNew = new InvMovimiento();
		InvDetMovimientoDAO invDetMovimientoDAO = new InvDetMovimientoDAO();
		InvBodega bodega = new InvBodega();

		InvDetMovActivoDAO invDetMovActivoDAO = new InvDetMovActivoDAO();
		// InvDetMovActivo invDetMovActivo = new InvDetMovActivo();

		try {
			
			movAjusteInvForm.validate(mapping, request, errors);
			
			if(errors.isEmpty()){
				/* se setean los valores para ingresar un movimiento */
				bodega.setCodBodega(Integer
						.valueOf(movAjusteInvForm.getCodBodega()));
				invMovimiento.setInvBodega(bodega);
				invMovimiento.setInvTipoMov(new InvTipoMov(movAjusteInvForm
						.getCodTipoMov()));
				invMovimiento.setComentario(movAjusteInvForm.getComentario());
				invMovimiento.setId(new InvMovimientoId(0, 0));
				int cantidad;
				Usuario user = (Usuario) request.getSession().getAttribute(
						"usuario");
				/* se ingresa el movimiento */
				invMovimientoDAO.save(invMovimiento, user.getIdUsuario());
				invMovimientoNew = invMovimientoDAO.findLast();
				InvDetMovimiento invDetMovimiento = new InvDetMovimiento();
				InvRecurso invRecurso = new InvRecurso();
				/* se setean los valores para ingresar un detalle de movimiento */
				invRecurso.setCodRecurso(movAjusteInvForm.getCodRecurso());
				invDetMovimiento.setCantidad(movAjusteInvForm.getCantidad());
				invDetMovimiento.setId(new InvDetMovimientoId(invMovimientoNew,
						invRecurso));
				invDetMovimientoDAO.save(invDetMovimiento, user.getIdUsuario());
				for (int j = 0; j < movAjusteInvForm.getSeries().length; j++) {
					String datosSerie = movAjusteInvForm.getSeries()[j];

					ActActivo actActivo = new ActActivo();
					ActActivo actActivoNew = new ActActivo();
					InvDetMovActivoId invDetMovActivoId;
					InvDetMovActivo invDetMovActivo;
					ActUnidad actUnidad = new ActUnidad();
					
					actUnidad.setCodUnidad(bodega.getCodBodega());
					/* se setean los datos para el activo */
					actActivo.setCodActivo(j);
					actActivo.setNumSerie(datosSerie);
					actActivo.setEstado("N");
					actActivo.setActUnidad(actUnidad);
					actActivo.setCodRecurso(movAjusteInvForm.getCodRecurso());

					/* se guarda el activo */
					actActivoDAO.save(actActivo);

					actActivoNew = actActivoDAO.findByCodRecursoNew(actActivo
							.getCodRecurso());

					invDetMovActivoId = new InvDetMovActivoId(invDetMovimiento,
							actActivoNew.getCodActivo());
					invDetMovActivo = new InvDetMovActivo(invDetMovActivoId);
					invDetMovActivoDAO.save(invDetMovActivo);

				}

				HibernateSessionFactory.getSession().beginTransaction().commit();
				errors.add("ajuste.mensaje.exito", new ActionError(
						"ajuste.mensaje.exito.insert"));
			}else{
				setFLAG_UPDATE(true);
			}
			

		} catch (Exception e) {
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		return mapping.findForward(target);
	}

	@SuppressWarnings("deprecation")
	public ActionForward insertSerializablesTralado(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response, ActionErrors errors)
			throws Exception, ServletException {

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		MovAjusteInvForm movAjusteInvForm = (MovAjusteInvForm) form;

		ActActivoDAO actActivoDAO = new ActActivoDAO();
		InvMovimientoDAO invMovimientoDAO = new InvMovimientoDAO();
		InvMovimiento invMovimiento = new InvMovimiento();
		InvMovimiento invMovimientoNew = new InvMovimiento();
		InvDetMovimientoDAO invDetMovimientoDAO = new InvDetMovimientoDAO();
		InvBodega bodega = new InvBodega();

		InvDetMovActivoDAO invDetMovActivoDAO = new InvDetMovActivoDAO();
		// InvDetMovActivo invDetMovActivo = new InvDetMovActivo();

		try {
			
			movAjusteInvForm.validate(mapping, request, errors);
			
			if(errors.isEmpty()){
				/* se setean los valores para ingresar un movimiento */
				bodega.setCodBodega(Integer
						.valueOf(movAjusteInvForm.getCodBodega()));
				invMovimiento.setInvBodega(bodega);
				invMovimiento.setInvTipoMov(new InvTipoMov(movAjusteInvForm
						.getCodTipoMov()));
				invMovimiento.setComentario(movAjusteInvForm.getComentario());
				invMovimiento.setId(new InvMovimientoId(0, 0));
				int cantidad;
				Usuario user = (Usuario) request.getSession().getAttribute(
						"usuario");
				/* se ingresa el movimiento */
				invMovimientoDAO.save(invMovimiento, user.getIdUsuario());
				invMovimientoNew = invMovimientoDAO.findLast();
				InvDetMovimiento invDetMovimiento = new InvDetMovimiento();
				InvRecurso invRecurso = new InvRecurso();
				/* se setean los valores para ingresar un detalle de movimiento */
				invRecurso.setCodRecurso(movAjusteInvForm.getCodRecurso());
				invDetMovimiento.setCantidad(movAjusteInvForm.getCantidad());
				invDetMovimiento.setId(new InvDetMovimientoId(invMovimientoNew,
						invRecurso));
				invDetMovimientoDAO.save(invDetMovimiento, user.getIdUsuario());

				for (int j = 0; j < movAjusteInvForm.getNumSeries().length; j++) {
					String datosSerie = movAjusteInvForm.getNumSeries()[j];

					String series[] = datosSerie.split(",");

					for (int k = 0; k < series.length; k++) {

						String numSerie_activo = series[k];

						if (numSerie_activo != null && !numSerie_activo.equals("")) {

							ActActivo actActivo = new ActActivo();
							InvDetMovActivoId invDetMovActivoId;
							InvDetMovActivo invDetMovActivo;
							ActUnidad actUnidad = new ActUnidad();
							
							actUnidad.setCodUnidad(bodega.getCodBodega());
							/* se setean los datos para el activo */

							actActivo = actActivoDAO.findById(Integer
									.valueOf(numSerie_activo));
							actActivo.setEstado("N");
							actActivo.setActUnidad(actUnidad);

							actActivoDAO.merge(actActivo);

							/*
							 * invDetMovActivoId = new
							 * InvDetMovActivoId(invDetMovimiento,
							 * actActivo.getCodActivo()); invDetMovActivo = new
							 * InvDetMovActivo(invDetMovActivoId);
							 * invDetMovActivoDAO.save(invDetMovActivo);
							 */

						}

					}

				}

				HibernateSessionFactory.getSession().beginTransaction().commit();
				errors.add("ajuste.mensaje.exito", new ActionError(
						"ajuste.mensaje.exito.insert"));
			}else{
				setFLAG_UPDATE(true);
			}
			

		} catch (Exception e) {
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		return mapping.findForward(target);
	}
	
	@SuppressWarnings("deprecation")
	public ActionForward deleteSerializables(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response, ActionErrors errors)
			throws Exception, ServletException {

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		MovAjusteInvForm movAjusteInvForm = (MovAjusteInvForm) form;

		ActActivoDAO actActivoDAO = new ActActivoDAO();
		InvMovimientoDAO invMovimientoDAO = new InvMovimientoDAO();
		InvMovimiento invMovimiento = new InvMovimiento();
		InvMovimiento invMovimientoNew = new InvMovimiento();
		InvDetMovimientoDAO invDetMovimientoDAO = new InvDetMovimientoDAO();
		InvBodega bodega = new InvBodega();

		InvDetMovActivoDAO invDetMovActivoDAO = new InvDetMovActivoDAO();
		// InvDetMovActivo invDetMovActivo = new InvDetMovActivo();

		try {
			
			movAjusteInvForm.validate(mapping, request, errors);
			
			if(errors.isEmpty()){
				/* se setean los valores para ingresar un movimiento */
				bodega.setCodBodega(Integer
						.valueOf(movAjusteInvForm.getCodBodega()));
				invMovimiento.setInvBodega(bodega);
				invMovimiento.setInvTipoMov(new InvTipoMov(movAjusteInvForm
						.getCodTipoMov()));
				invMovimiento.setComentario(movAjusteInvForm.getComentario());
				invMovimiento.setId(new InvMovimientoId(0, 0));
				int cantidad;
				Usuario user = (Usuario) request.getSession().getAttribute(
						"usuario");
				/* se ingresa el movimiento */
				invMovimientoDAO.save(invMovimiento, user.getIdUsuario());
				invMovimientoNew = invMovimientoDAO.findLast();
				InvDetMovimiento invDetMovimiento = new InvDetMovimiento();
				InvRecurso invRecurso = new InvRecurso();
				/* se setean los valores para ingresar un detalle de movimiento */
				invRecurso.setCodRecurso(movAjusteInvForm.getCodRecurso());
				invDetMovimiento.setCantidad(movAjusteInvForm.getCantidad());
				invDetMovimiento.setId(new InvDetMovimientoId(invMovimientoNew,
						invRecurso));
				invDetMovimientoDAO.save(invDetMovimiento, user.getIdUsuario());
				for (int j = 0; j < movAjusteInvForm.getNumSeries().length; j++) {
					String datosSerie = movAjusteInvForm.getNumSeries()[j];

					String series[] = datosSerie.split(",");

					for (int k = 0; k < series.length; k++) {

						String numSerie_activo = series[k];

						if (numSerie_activo != null && !numSerie_activo.equals("")) {

							ActActivo actActivo = new ActActivo();
							InvDetMovActivoId invDetMovActivoId;
							InvDetMovActivo invDetMovActivo;
							/* se setean los datos para el activo */

							actActivo = actActivoDAO.findById(Integer
									.valueOf(numSerie_activo));
							actActivo.setEstado("B");
							actActivo.setActUnidad(null);

							actActivoDAO.merge(actActivo);

							/*
							 * invDetMovActivoId = new
							 * InvDetMovActivoId(invDetMovimiento,
							 * actActivo.getCodActivo()); invDetMovActivo = new
							 * InvDetMovActivo(invDetMovActivoId);
							 * invDetMovActivoDAO.save(invDetMovActivo);
							 */

						}

					}

				}

				HibernateSessionFactory.getSession().beginTransaction().commit();
				errors.add("ajuste.mensaje.exito", new ActionError(
						"ajuste.mensaje.exito.insert"));
			}else{
				setFLAG_UPDATE(true);
			}

		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		return mapping.findForward(target);
	}

	@Override
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		return null;
	}
}