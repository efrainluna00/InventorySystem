/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.activos;

import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;

import com.saldei.hibernate.tables.activos.ActSolicitudDAO;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.web.action.BaseAction;
import com.saldei.web.form.activos.RecibirDescargaActivoForm;

/**
 * MyEclipse Struts Creation date: 08-03-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/recibirDescargaActivoAction"
 *                name="recibirDescargaActivoForm"
 *                input="/html/activos/recibirDescargaActivo.jsp"
 *                parameter="accion" scope="request"
 * @struts.action-forward name="updateFail"
 *                        path="/html/activos/recibirDescargaActivo.jsp"
 * @struts.action-forward name="back"
 *                        path="/recibirDescargaActivoAction.do?accion=Find"
 * @struts.action-forward name="success"
 *                        path="/html/activos/recibirDescargaActivoAction.jsp?accion="
 */
public class RecibirDescargaActivoAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */

	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */

	@SuppressWarnings("deprecation")
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@SuppressWarnings("deprecation")
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward find(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		String target = KEY_SUCCESS;
		HttpSession session = request.getSession(true);

		List data;

		RecibirDescargaActivoForm recibirDescargaActivoForm = (RecibirDescargaActivoForm) form;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();

		try {
			if (recibirDescargaActivoForm.getMostrarHistorico() != null
					&& recibirDescargaActivoForm.getMostrarHistorico().equals(
							"S"))
				data = actSolicitudDAO.recDescActfindSolicitudes(session
						.getAttribute("user").toString(), "S");
			else
				data = actSolicitudDAO.recDescActfindSolicitudes(session
						.getAttribute("user").toString(), "N");
			request.setAttribute("listaSolicitudes", data);

			// TipoUnidadForm f = (TipoUnidadForm) listaTipoUnidad;
			// unidadForm.setActTipoUnidad(f);

			if (!isFLAG_UPDATE()) {
				recibirDescargaActivoForm.reset(mapping, request);
			} else {
				setFLAG_UPDATE(false);
			}

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		return mapping.findForward(target);
	}
}