/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.activos;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;

import com.saldei.hibernate.tables.Usuario;
import com.saldei.hibernate.tables.activos.ActDetSolicitudDAO;
import com.saldei.hibernate.tables.activos.ActSolicitud;
import com.saldei.hibernate.tables.activos.ActSolicitudDAO;
import com.saldei.hibernate.tables.activos.ActSolicitudId;
import com.saldei.util.commons.Constants;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.util.mail.Email;
import com.saldei.web.action.BaseAction;
import com.saldei.web.bean.seguridad.UsuarioDto;
import com.saldei.web.form.activos.DetSolSuministroForm;
import com.saldei.web.form.activos.SolSuministroForm;
import com.saldei.web.services.administracion.ParametroServices;
import com.saldei.web.services.seguridad.UsuarioServices;

/**
 * MyEclipse Struts Creation date: 06-21-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/detReqRecurso" name="detReqRecursoForm"
 *                input="/html/activos/detReqRecurso.jsp" parameter="accion"
 *                scope="request" validate="true"
 * @struts.action-forward name="updateFail"
 *                        path="/html/activos/detReqRecurso.jsp"
 * @struts.action-forward name="back" path="/reqRecursoAction.do"
 * @struts.action-forward name="success"
 *                        path="/html/activos/detReqRecurso.jsp?accion="
 * @struts.action-forward name="cancel"
 *                        path="/html/activos/detReqRecurso.jsp?accion=Find"
 */
public class DetSolSuministroAction extends BaseAction {

	@Override
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		DetSolSuministroForm detSolSuministroForm = (DetSolSuministroForm) form;
		ActDetSolicitudDAO actDetSolicitudDAO = new ActDetSolicitudDAO();

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		try {
			detSolSuministroForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				detSolSuministroForm.setActActivo(null);
				actDetSolicitudDAO.delete(detSolSuministroForm
						.getActDetSolicitud());

				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("detSum.mensaje.exito", new ActionError(
						"detSum.mensaje.exito.delete"));
			} else {
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@Override
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub

		DetSolSuministroForm detSolSuministroForm = (DetSolSuministroForm) form;

		ActDetSolicitudDAO actDetSolicitudDAO = new ActDetSolicitudDAO();

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		try {
			detSolSuministroForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				detSolSuministroForm.setActActivo(null);
				actDetSolicitudDAO.save(detSolSuministroForm
						.getActDetSolicitud());

				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("detSum.mensaje.exito", new ActionError(
						"detSum.mensaje.exito.insert"));
			} else {
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@Override
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		DetSolSuministroForm detSolSuministroForm = (DetSolSuministroForm) form;

		ActDetSolicitudDAO actDetSolicitudDAO = new ActDetSolicitudDAO();

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		try {
			detSolSuministroForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				detSolSuministroForm.setActActivo(null);
				actDetSolicitudDAO.merge(detSolSuministroForm
						.getActDetSolicitud());
				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("detSum.mensaje.exito", new ActionError(
						"detSum.mensaje.exito.update"));
			} else {
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward find(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data;

		DetSolSuministroForm detSolSuministroForm = (DetSolSuministroForm) form;
		ActDetSolicitudDAO actDetSolicitudDAO = new ActDetSolicitudDAO();
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();

		try {

			/* para guardar la configuracion del grid papa */
			request.setAttribute("numeroPagina", request
					.getParameter("numeroPagina"));
			request.setAttribute("nombreGrid", request
					.getParameter("nombreGrid"));
			request.setAttribute("cantidadPagina", request
					.getParameter("cantidadPagina"));

			detSolSuministroForm.getActDetSolicitud().getId().setActSolicitud(
					actSolicitudDAO.findById(new ActSolicitudId(
							detSolSuministroForm.getTipoSolicitud(),
							detSolSuministroForm.getCodSolicitud())));
			data = actDetSolicitudDAO
					.findAllDetSolSuministro((detSolSuministroForm
							.getCodSolicitud()));
			request.setAttribute("listDetRequisicion", data);
			// int codppto = detallePptoForm.getCodPresupuesto();
			if (!isFLAG_UPDATE()) {
				detSolSuministroForm.reset(mapping, request);
			} else {
				setFLAG_UPDATE(false);
			}
			// detallePptoForm.setCodPresupuesto(codppto);

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		return mapping.findForward(target);
	}

	protected Map getKeyMethodMap() {
		HashMap map = (HashMap) super.getKeyMethodMap();

		/*
		 * <html:submit property="accion" styleId="enviarSolicitud">
		 * <bean:message key="opc.enviarSolicitud" />
		 */

		map.put("opc.enviarSolicitud", "enviarRequisicion");

		return map;
	}

	@SuppressWarnings("deprecation")
	public ActionForward enviarRequisicion(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception, ServletException {

		ActionErrors errors = new ActionErrors();
		ActionMessages messages = new ActionErrors();
		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		UsuarioDto usuario;
		ParametroServices parametroServices = new ParametroServices();
		Email email = new Email();
		String msgText;
		UsuarioServices usuarioServices = new UsuarioServices();
		Usuario user = (Usuario) request.getSession().getAttribute("usuario");
		// form.reset(mapping,request);
		// TODO Auto-generated method stub
		DetSolSuministroForm detSolSuministroForm = (DetSolSuministroForm) form;
		SolSuministroForm solSuministroForm;

		ActSolicitud actSolicitud = new ActSolicitud();
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		// ActSolicitudId actSolicitudId = new ActSolicitudId();
		// actSolicitudId.setCodSolicitud(solDescActForm.getCodSolicitud());
		// actSolicitudId.setTipoSolicitud(solDescActForm.getTipoSolicitud());
		actSolicitud = actSolicitudDAO.findById(detSolSuministroForm.getId()
				.getActSolicitud().getId());

		if (!actSolicitud.getActDetSolicituds().isEmpty()) {
			actSolicitud.setEstado("E");
			detSolSuministroForm.setEstado("E");

			try {
				msgText = "Buen dia.<br><br>"
						+ "Se le informa que el usuario "
						+ user.getPrimerNom()
						+ " "
						+ user.getPrimerApe()
						+ " ha enviado una solicitud de suministros<br>con codigo "
						+ actSolicitud.getId().getCodSolicitud()
						+ " y creada en la fecha "
						+ actSolicitud.getFecha_creacion()
						+ ".<br>Para ver mas detalles y aprobar o rechazar dicha solicitud,"
						+ "<br>consulte la opcion de aprobacion de solicitud de suministros"
						+ " en el sistema SALDEI.<br><br>";
				if (actSolicitud.getComentario() != null
						&& !actSolicitud.getComentario().trim().equals(""))
					msgText += "El usuario " + user.getPrimerNom() + " "
							+ user.getPrimerApe()
							+ " especifico la siguiente descripcion:<br>"
							+ "\"" + actSolicitud.getComentario() + "\"";
				msgText += "<br>--------------------------------------------------------------------"
						+ "-------------------------------------------------------------------<br>"
						+ "Este correo fue generado de manera automatica por el sistema SALDEI.<br>"
						+ "Favor no responder a este correo.<br>Gracias.";
				usuario = usuarioServices.getUsuarioDto(parametroServices
						.valorParametro(Constants.Parametro_JEFE_DEPTO));
				email.sendEmail("UCA-SALDEI: Solicitud de Suministros",
						"saldei@uca.edu.sv",
						new String[] { usuario.getEmail() }, null, msgText,
						null);

				actSolicitudDAO.merge(actSolicitud);
				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("detSum.mensaje.exito", new ActionError(
						"detSum.mensaje.exito.enviada"));
				this.addErrors(request, errors);
			} catch (Exception e) {
				e.printStackTrace();
				HibernateSessionFactory.getSession().beginTransaction()
						.rollback();
				// TODO: handle exception
			} finally {
				HibernateSessionFactory.getSession().close();
			}
		}// endif isEmpty

		else {
			errors.add("detsoldesca.mensajeError.error", new ActionError(
					"detsoldesca.mensajeError.error.noenviar"));
			this.addErrors(request, errors);
			target = "updateFail";
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward back(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception, ServletException {
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActSolicitud actSolicitud;
		SolSuministroForm solSuministroForm = new SolSuministroForm();

		// form.reset(mapping,request);
		DetSolSuministroForm dsuf = (DetSolSuministroForm) form;
		actSolicitud = actSolicitudDAO.findById(new ActSolicitudId(dsuf
				.getTipoSolicitud(), dsuf.getCodSolicitud()));
		solSuministroForm.setActSolicitud(actSolicitud);

		request.setAttribute("flagBack", "lnk" + dsuf.getTipoSolicitud()
				+ String.valueOf(dsuf.getCodSolicitud()));
		return mapping.findForward(KEY_BACK);
	}

}