/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.inventario;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.saldei.hibernate.tables.Usuario;
import com.saldei.hibernate.tables.activos.ActDetSolicitud;
import com.saldei.hibernate.tables.activos.ActDetSolicitudDAO;
import com.saldei.hibernate.tables.activos.ActSolicitudDAO;
import com.saldei.hibernate.tables.activos.ActSolicitudId;
import com.saldei.hibernate.tables.inventario.InvBodega;
import com.saldei.hibernate.tables.inventario.InvDetMovimiento;
import com.saldei.hibernate.tables.inventario.InvDetMovimientoDAO;
import com.saldei.hibernate.tables.inventario.InvDetMovimientoId;
import com.saldei.hibernate.tables.inventario.InvMovimiento;
import com.saldei.hibernate.tables.inventario.InvMovimientoDAO;
import com.saldei.hibernate.tables.inventario.InvMovimientoId;
import com.saldei.hibernate.tables.inventario.InvRecurso;
import com.saldei.hibernate.tables.inventario.InvTipoMov;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.web.bean.seguridad.UsuarioDto;
import com.saldei.web.form.inventario.IngAbasSuministroForm;
import com.saldei.web.form.inventario.IngOrdenCompraForm;
import com.saldei.web.services.seguridad.UsuarioServices;

/** 
 * MyEclipse Struts
 * Creation date: 08-03-2009
 * 
 * XDoclet definition:
 * @struts.action path="/ingAbasSuministroAction" name="ingAbasSuministroForm" input="/html/inventario/ingAbasSuministro.jsp" parameter="accion" scope="request"
 * @struts.action-forward name="updateFail" path="/html/inventario/ingAbasSuministro.jsp"
 * @struts.action-forward name="success" path="/html/inventario/ingAbasSuministro.jsp?accion="
 */
public class IngAbasSuministroAction extends LookupDispatchAction {
	/*
	 * Generated Methods
	 */

	@Override
	protected Map getKeyMethodMap() {
        HashMap map = new HashMap();
        
		map.put("opc.find", "aprobadas");
        map.put("opc.insert", "insert");                        
        map.put("opc.enviarSolicitud", "enviar");
        map.put("opc.cancel", "enviar");
        map.put("opc.back", "aprobadas");
        
        return map;
  }
	
	
	
	
	/** 
	 * Method Aprobadas: busca todas las solicitudes con estado aprobadas para mostrarse en la pantalla de ingreso
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward aprobadas(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HttpSession session = request.getSession(true);
		String target = "ingresar";
		String user;
		List data;
		IngAbasSuministroForm ingAbasSuministroForm =  (IngAbasSuministroForm) form;// TODO Auto-generated method stub
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		
		
		try {
			user =  (String) session.getAttribute("user");
			if(ingAbasSuministroForm.getMostrarHistorico()!=null && ingAbasSuministroForm.getMostrarHistorico().equals("S"))
							data = actSolicitudDAO.findAllSolicutudAbasAprobadas(user,"S");
						else
							data = actSolicitudDAO.findAllSolicutudAbasAprobadas(user,"N");
		    request.setAttribute("listSolAbasAprobadas", data);						
			
		} catch (Exception e) {
			e.printStackTrace();			
			// TODO: handle exception
		}finally{
			HibernateSessionFactory.getSession().close();
		} 	
		return mapping.findForward(target);
	}
	
	@SuppressWarnings("unchecked")
	public ActionForward enviar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		String target = "success";
		List data;
		IngAbasSuministroForm ingAbasSuministroForm = (IngAbasSuministroForm) form;// TODO Auto-generated method stub
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		UsuarioDto usuarioDto;
		UsuarioServices usuarioServices = new UsuarioServices();
		ActDetSolicitudDAO actDetSolicitudDAO = new ActDetSolicitudDAO();
		
				
		try {
			ingAbasSuministroForm.setActSolicitud(actSolicitudDAO.findById(new ActSolicitudId(ingAbasSuministroForm.getTipoSolicitud(),Integer.valueOf(ingAbasSuministroForm.getCodSolicitud()))));
			data = actDetSolicitudDAO.AbastecimientoDetFind(String.valueOf(ingAbasSuministroForm.getCodSolicitud()), String.valueOf(ingAbasSuministroForm.getActSolicitud().getCodBodega()));
			usuarioDto = usuarioServices.getUsuarioDto(ingAbasSuministroForm.getActSolicitud().getCodSolicitante());
			ingAbasSuministroForm.setSolicitante(usuarioDto.getPrimerNom()+" "+usuarioDto.getPrimerApe());
					
			
			request.setAttribute("listSolDet", data);
		
		} catch (Exception e) {
			e.printStackTrace();			
			// TODO: handle exception
		}finally{
			HibernateSessionFactory.getSession().close();
		} 	
		return mapping.findForward(target);
	}

	@SuppressWarnings("unchecked")
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		
		String target = "success";
		Integer codTipoMovimiento = 1;
		
		IngAbasSuministroForm ingAbasSuministroForm = (IngAbasSuministroForm) form;// TODO Auto-generated method stub
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();		
		InvMovimientoDAO invMovimientoDAO = new InvMovimientoDAO();
		InvMovimiento invMovimiento =  new InvMovimiento();
		InvMovimiento invMovimientoNew =  new InvMovimiento();
		InvDetMovimientoDAO invDetMovimientoDAO = new InvDetMovimientoDAO();		
		InvBodega bodega = new InvBodega();
		ActionErrors errors =  new ActionErrors();
		int flagMovimiento = 0;
		int flagCompletado = 1;
				
		try {
			
			ingAbasSuministroForm.validate(mapping, request, errors);
			
			if(errors.isEmpty()){
			
				/* se setean los valores para ingresar un movimiento*/
				Usuario user = (Usuario)request.getSession().getAttribute("usuario");
				ingAbasSuministroForm.setActSolicitud(actSolicitudDAO.findById(new ActSolicitudId(ingAbasSuministroForm.getTipoSolicitud(),Integer.valueOf(ingAbasSuministroForm.getCodSolicitud()))));
				bodega.setCodBodega(ingAbasSuministroForm.getActSolicitud().getCodBodega());
				invMovimiento.setInvBodega(bodega);
				invMovimiento.setCodSol(ingAbasSuministroForm.getCodSolicitud());
				invMovimiento.setTipoSol(ingAbasSuministroForm.getTipoSolicitud());			
				invMovimiento.setInvTipoMov(new InvTipoMov(codTipoMovimiento));
				invMovimiento.setId(new InvMovimientoId(0,0));
				int cantidad;
				
				/* se ingresa el movimiento*/
				invMovimientoDAO.save(invMovimiento,user.getIdUsuario());
				
				invMovimientoNew = invMovimientoDAO.findBySolicitud(ingAbasSuministroForm.getTipoSolicitud(),ingAbasSuministroForm.getCodSolicitud());
				
				for(int i=0;i < ingAbasSuministroForm.getCantidadIngresar().length;i++){
					InvDetMovimiento invDetMovimiento =  new InvDetMovimiento();
					String datos = ingAbasSuministroForm.getCantidadIngresar()[i];
					String[] valores = datos.split(",");	
					cantidad = (valores.length > 3)?Integer.valueOf(valores[3]):0;
					InvRecurso invRecurso =  new InvRecurso();
					
					/* se setean los valores para ingresar un detalle de movimiento*/
					invRecurso.setCodRecurso(valores[0]);
					invDetMovimiento.setCantidad(cantidad);
					invDetMovimiento.setId(new InvDetMovimientoId(invMovimientoNew, invRecurso ));
					
					/* se ingresa el detalle de  movimiento*/					
					if(cantidad != 0){
						invDetMovimientoDAO.save(invDetMovimiento,user.getIdUsuario());
						flagMovimiento = 1;
					}
					if(cantidad+Integer.valueOf(valores[2]) != Integer.valueOf(valores[1])){
						flagCompletado = 0;
					}
						
				}
				if(flagCompletado == 1){
					ingAbasSuministroForm.getActSolicitud().setEstado("F");
					actSolicitudDAO.merge(ingAbasSuministroForm.getActSolicitud());
				}
				if(flagMovimiento == 1){
					HibernateSessionFactory.getSession().beginTransaction().commit();
					errors.add("ingSolAbas.mensaje.exito", new ActionError("ingSolAbas.mensaje.exito.ingreso"));
				}else{
					HibernateSessionFactory.getSession().beginTransaction().rollback();
					errors.add("ingSolAbas.mensaje.fallo", new ActionError("ingSolAbas.mensaje.fallo"));
				}
				
			}
			
		} catch (Exception e) {
			e.printStackTrace();			
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		}finally{
			HibernateSessionFactory.getSession().close();
			if(!errors.isEmpty()){
				saveErrors(request, errors);
			}
		} 	
		this.enviar(mapping, form, request, response);
		return mapping.findForward(target);
	}

}