/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.activos;

import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;
import org.hibernate.exception.ConstraintViolationException;

import com.saldei.hibernate.tables.activos.ActSolicitud;
import com.saldei.hibernate.tables.activos.ActSolicitudDAO;
import com.saldei.util.commons.Constants;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.util.mail.Email;
import com.saldei.web.action.BaseAction;
import com.saldei.web.bean.seguridad.UsuarioDto;
import com.saldei.web.form.activos.SolicitudCompraForm;
import com.saldei.web.services.administracion.ParametroServices;
import com.saldei.web.services.seguridad.UsuarioServices;

/**
 * MyEclipse Struts Creation date: 06-23-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/solicitudCompraAction" name="solicitudCompraForm"
 *                input="/html/activos/solicitudCompra.jsp" scope="request"
 */
public class SolicitudCompraAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward find(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data;

		SolicitudCompraForm solicitudCompraForm = (SolicitudCompraForm) form;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		String idUsuario = (String) session.getAttribute("user");

		try {
			/* para guardar la configuracion del grid papa */
			request.setAttribute("numeroPagina", request
					.getParameter("numeroPagina"));
			request.setAttribute("nombreGrid", request
					.getParameter("nombreGrid"));
			request.setAttribute("cantidadPagina", request
					.getParameter("cantidadPagina"));

			data = actSolicitudDAO.findAllSolicutudCompras(idUsuario);
			request.setAttribute("listSolCompras", data);
			if (!isFLAG_UPDATE()) {
				solicitudCompraForm.reset(mapping, request);
			} else {
				setFLAG_UPDATE(false);
			}

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}
		return mapping.findForward(target);
	}

	@Override
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		SolicitudCompraForm solicitudCompraForm = (SolicitudCompraForm) form;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		try {
			solicitudCompraForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				actSolicitudDAO.delete(solicitudCompraForm.getActSolicitud());

				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("solCompra.mensaje.exito", new ActionError(
						"solCompra.mensaje.exito.delete"));
			} else {
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} catch (ConstraintViolationException e) {
			e.printStackTrace();
			errors.add("solCompra.mensajeError.error", new ActionError(
					"solCompra.mensajeError.error.nodelete"));
			HibernateSessionFactory.getSession().beginTransaction().rollback();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@Override
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub

		SolicitudCompraForm solicitudCompraForm = (SolicitudCompraForm) form;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		try {
			solicitudCompraForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {

				actSolicitudDAO.save(solicitudCompraForm.getActSolicitud());

				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("solCompra.mensaje.exito", new ActionError(
						"solCompra.mensaje.exito.insert"));
			} else {
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@Override
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub

		SolicitudCompraForm solicitudCompraForm = (SolicitudCompraForm) form;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;

		try {
			solicitudCompraForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {

				actSolicitudDAO.merge(solicitudCompraForm.getActSolicitud());
				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("solCompra.mensaje.exito", new ActionError(
						"solCompra.mensaje.exito.update"));
			} else {
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward enviarSolicitud(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		ActionErrors errors = new ActionErrors();
		SolicitudCompraForm solicitudCompraForm = (SolicitudCompraForm) form;
		ActSolicitudDAO actSolicitudDAO = new ActSolicitudDAO();
		ActSolicitud actSolicitud = new ActSolicitud();
		UsuarioServices usuarioServices = new UsuarioServices();
		UsuarioDto usuario;
		ParametroServices parametroServices = new ParametroServices();
		Email email = new Email();

		HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		String msgText;

		try {
			solicitudCompraForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				ActionError msg = new ActionError(
						"aprSolCompra.mensaje.exito.aprobar");
				msg.toString();
				actSolicitud = actSolicitudDAO.findById(solicitudCompraForm
						.getActSolicitud().getId());
				msgText = "Buen dia.<br><br>"
						+ "Se le informa que el usuario "
						+ solicitudCompraForm.getSolicitante()
						+ " ha enviado una solicitud de compra<br>con codigo "
						+ actSolicitud.getId().getCodSolicitud()
						+ " y creada en la fecha "
						+ actSolicitud.getFecha_creacion()
						+ ".<br>Para ver mas detalles y aprobar o rechazar dicha solicitud,"
						+ "<br>consulte la opcion de aprobacion de solicitud de compras"
						+ " en el sistema SALDEI.<br><br>";
				if (solicitudCompraForm.getComentario() != null
						&& !solicitudCompraForm.getComentario().trim().equals(
								""))
					msgText += "El usuario "
							+ solicitudCompraForm.getSolicitante()
							+ " especifico la siguiente descripcion:<br>"
							+ "\"" + solicitudCompraForm.getComentario() + "\"";
				msgText += "<br>--------------------------------------------------------------------"
						+ "-------------------------------------------------------------------<br>"
						+ "Este correo fue generado de manera automatica por el sistema SALDEI.<br>"
						+ "Favor no responder a este correo.<br>Gracias.";
				/*
				 * "El Usuario "+solicitudCompraForm.getSolicitante()+" ha
				 * generado una nueva solicitu de Compra " + "\n debera ingresar
				 * al sistema SALDEI para aprobar esta solicitud \n\n" + " * no
				 * responder a este Email";
				 */
				usuario = usuarioServices.getUsuarioDto(parametroServices
						.valorParametro(Constants.Parametro_JEFE_DEPTO));
				email.sendEmail("UCA-SALDEI: Solicitud de Compra",
						"saldei@uca.edu.sv",
						new String[] { usuario.getEmail() }, null, msgText,
						null);
				solicitudCompraForm.setEstado("E");
				actSolicitudDAO.merge(solicitudCompraForm.getActSolicitud());
				HibernateSessionFactory.getSession().beginTransaction()
						.commit();
				errors.add("solCompra.mensaje.exito", new ActionError(
						"solCompra.mensaje.exito.enviar"));

			} else {
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		} finally {
			HibernateSessionFactory.getSession().close();
			if (!errors.isEmpty()) {
				saveErrors(request, errors);
			}

		}

		find(mapping, form, request, response);
		return mapping.findForward(target);
	}
}
