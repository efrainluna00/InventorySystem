/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.saldei.web.action.inventario;

import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;
import org.hibernate.exception.ConstraintViolationException;

//import com.saldei.hibernate.tables.activos.InvRecursoDAO;
import com.saldei.hibernate.tables.Usuario;
import com.saldei.hibernate.tables.inventario.InvRecurso;
import com.saldei.hibernate.tables.inventario.InvRecursoDAO;
import com.saldei.util.hibernate.dao.HibernateSessionFactory;
import com.saldei.web.action.BaseAction;
import com.saldei.web.form.activos.PresupuestoForm;
import com.saldei.web.form.inventario.RecursoForm;

/** 
 * MyEclipse Struts
 * Creation date: 05-31-2009
 * 
 * XDoclet definition:
 * @struts.action path="/recursoAction" name="recursoForm" input="/html/inventario/recurso.jsp" parameter="accion" scope="request"
 * @struts.action-forward name="back" path="/recursoAction.do?accion=Find"
 * @struts.action-forward name="updateFail" path="/html/inventario/recurso.jsp"
 * @struts.action-forward name="success" path="/html/inventario/recurso.jsp?accion="
 */
public class RecursoAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	private String serializableDescr;
	
	//No se eliminan recursos solo se colocan como inactivos
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		
		Usuario user = (Usuario)request.getSession().getAttribute("usuario");
		InvRecurso invRecurso = new InvRecurso();
		HttpSession session = request.getSession(true);
	    String target = KEY_SUCCESS;
	    
		RecursoForm recursoForm = (RecursoForm) form;
		InvRecursoDAO invRecursoDAO = new InvRecursoDAO();				    	
		invRecurso = invRecursoDAO.findById(recursoForm.getCodRecurso());
		invRecurso.setUsuarioMov(user.getIdUsuario());
		invRecursoDAO.merge(invRecurso);
		HibernateSessionFactory.getSession().beginTransaction().commit();
		HibernateSessionFactory.getSession().close();
		try {
			recursoForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {				
				InvRecurso recurso = invRecursoDAO.findById(recursoForm.getCodRecurso());
				invRecursoDAO.delete(recurso);
			    HibernateSessionFactory.getSession().beginTransaction().commit();
				errors.add("recurso.mensaje.exito", new ActionError("recurso.mensaje.exito.delete"));
			}else{
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		}
		catch (ConstraintViolationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				errors.add("recurso.mensajeError.error", new ActionError("recurso.mensajeError.error.nodelete"));
				HibernateSessionFactory.getSession().beginTransaction().rollback();
			}
		catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
		}finally{
			HibernateSessionFactory.getSession().close();
		}
		
	    find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	@SuppressWarnings("deprecation")
	public ActionForward insert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		Usuario user = (Usuario)request.getSession().getAttribute("usuario");
		RecursoForm recursoForm = (RecursoForm) form;
		InvRecursoDAO invRecursoDAO = new InvRecursoDAO();			
		
		HttpSession session = request.getSession(true);
	    String target = KEY_SUCCESS;
				    
	    
		try {
			recursoForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				if(recursoForm.getConsumible().equals("S"))
					recursoForm.setSerializable("N");
				else
					recursoForm.setSerializable("S");
				recursoForm.getInvRecurso().setUsuarioMov(user.getIdUsuario());
				invRecursoDAO.save(recursoForm.getInvRecurso());
			    HibernateSessionFactory.getSession().beginTransaction().commit();
				errors.add("recurso.mensaje.exito", new ActionError("recurso.mensaje.exito.insert"));
			}else{
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();
			// TODO: handle exception
		}finally{
			HibernateSessionFactory.getSession().close();
		}
		
	    find(mapping, form, request, response);
		return mapping.findForward(target);
	}

	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors, ActionMessages messages) throws Exception,
			ServletException {
		// TODO Auto-generated method stub
		Usuario user = (Usuario)request.getSession().getAttribute("usuario");
		RecursoForm recursoForm = (RecursoForm) form;
		InvRecursoDAO invRecursoDAO = new InvRecursoDAO();			
		HttpSession session = request.getSession(true);
	    String target = KEY_SUCCESS;					   			
	    
		
		try {
			recursoForm.validate(mapping, request, errors);
			if (errors.isEmpty()) {
				if(recursoForm.getConsumible().equals("S"))
					recursoForm.setSerializable("N");
				else
					recursoForm.setSerializable("S");
				recursoForm.getInvRecurso().setUsuarioMov(user.getIdUsuario());
			    invRecursoDAO.merge(recursoForm.getInvRecurso());				  
			    HibernateSessionFactory.getSession().beginTransaction().commit();				
				errors.add("recurso.mensaje.exito", new ActionError("recurso.mensaje.exito.update"));
			}else{
				target = "updateFail";
				setFLAG_UPDATE(true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			HibernateSessionFactory.getSession().beginTransaction().rollback();				
			// TODO: handle exception
		}finally{
			HibernateSessionFactory.getSession().close();
		}
		
	    find(mapping, form, request, response);
		return mapping.findForward(target);
	}
	
	public ActionForward find(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception,
			ServletException {		
		//HttpSession session = request.getSession(true);
		String target = KEY_SUCCESS;
		List data;
		
		RecursoForm recursoForm = (RecursoForm) form;
		InvRecursoDAO invRecursoDAO = new InvRecursoDAO();
					
	    
		try {			
			data = invRecursoDAO.findAll();
		    request.setAttribute("listRecurso", data);
			if(!isFLAG_UPDATE()){
				recursoForm.reset(mapping, request);
			}else{
				setFLAG_UPDATE(false);
			}			
			
		} catch (Exception e) {
			e.printStackTrace();			
			// TODO: handle exception
		}finally{
			HibernateSessionFactory.getSession().close();
		} 	
		return mapping.findForward(target);
	}

	public String getSerializableDescr() {
		return serializableDescr;
	}

	public void setSerializableDescr(String serializableDescr) {
		this.serializableDescr = serializableDescr;
	}

}
